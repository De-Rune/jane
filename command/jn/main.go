package main

import (
	"fmt"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"sync"
	"time"

	"github.com/De-Rune/jane/package/io"
	"github.com/De-Rune/jane/package/jn"
	"github.com/De-Rune/jane/package/jn/jnset"
	"github.com/De-Rune/jane/parser"
)

func help(cmd string) {
	if cmd != "" {
		println("this module can only by used as a single")
		return
	}
	helpContent := [][]string{
		{"help", "show help"},
		{"version", "show version"},
		{"init", "initialize project jane"},
	}
	maxlen := len(helpContent[0][0])
	for _, part := range helpContent {
		length := len(part[0])
		if length > maxlen {
			maxlen = length
		}
	}
	var sb strings.Builder
	const space = 5
	for _, part := range helpContent {
		sb.WriteString(part[0])
		sb.WriteString(strings.Repeat(" ", (maxlen-len(part[0]))+space))
		sb.WriteString(part[1])
		sb.WriteByte('\n')
	}
	println(sb.String()[:sb.Len()-1])
}

func version(cmd string) {
	if cmd != "" {
		println("this module can only by used as a single")
		return
	}
	println("Jane Programming language\n" + jn.Version)
}

func initProject(cmd string) {
	if cmd != "" {
		println("this module can only by used as a single")
		return
	}
	content := []byte(`{
		"cxx_out_dir": "./dist/",
		"cxx_out_name": "jn.cxx",
		"out_name": "main"
	  }`)
	err := ioutil.WriteFile(jn.SettingsFile, content, 0666)
	if err != nil {
		println(err.Error())
		os.Exit(0)
	}
	println("initialized project")
}

func processCommand(namespace, cmd string) bool {
	switch namespace {
	case "help":
		help(cmd)
	case "version":
		version(cmd)
	case "init":
		initProject(cmd)
	default:
		return false
	}
	return true
}

func init() {
	jn.ExecutablePath = filepath.Dir(os.Args[0])
	if len(os.Args) < 2 {
		os.Exit(0)
	}
	var sb strings.Builder
	for _, arg := range os.Args[1:] {
		sb.WriteString(" " + arg)
	}
	os.Args[0] = sb.String()[1:]
	arg := os.Args[0]
	index := strings.Index(arg, " ")
	if index == -1 {
		index = len(arg)
	}
	if processCommand(arg[:index], arg[index:]) {
		os.Exit(0)
	}
}

func loadJnSet() {
	info, err := os.Stat(jn.SettingsFile)
	if err != nil || info.IsDir() {
		println(`jn settings file ("` + jn.SettingsFile + `") is not found`)
		os.Exit(0)
	}
	bytes, err := os.ReadFile(jn.SettingsFile)
	if err != nil {
		println(err.Error())
		os.Exit(0)
	}
	jn.JnSet, err = jnset.Load(bytes)
	if err != nil {
		println("jn settings has error")
		println(err.Error())
		os.Exit(0)
	}
}

func printErrors(errors []string) {
	defer os.Exit(0)
	for _, message := range errors {
		fmt.Println(message)
	}
}

func appendStandards(code *string) {
	year, month, day := time.Now().Date()
	hour, min, _ := time.Now().Clock()
	timeString := fmt.Sprintf("%d/%d/%d %d.%d (DD/MM/YYYY) (HH.MM)", day, month, year, hour, min)
	*code = `// JN compiler version:		` + jn.Version + `
// Date: 					` + timeString + `
// Author:  				` + jn.Author + `
// License: 				` + jn.License + `

// this file contains cxx module code which is automatically generated by JN compiler.
// generated code in this file provide cxx functions and structures corresponding to the definition
// in the JN source files

// #pragma region JN_STANDARD_IMPORTS
#include <iostream>
#include <string>
#include <functional>
#include <vector>
#include <locale.h>
#include <cstdint>
#include <stdint.h>
#include <inttypes.h>
// #pragma endregion JN_STANDARD_IMPORTS


// #pragma region JN_BUILTIN_VALUES
#define nil nullptr
// #pragma endregion JN_BUILTIN_VALUES

// #pragma region JN_RUNTIME_FUNCTIONS
static inline void panic(const std::wstring _Msg) {
	std::wcout << _Msg << std::endl;
	std::exit(EXIT_FAILURE);
}

template <typename _Enum_t, typename _Index_t, typename _Item_t>
static inline void foreach(const _Enum_t _Enum, const std::function<void(_Index_t, _Item_t)> _Body) {
  _Index_t _index{0};
  for (auto _item: _Enum) { _Body(_index++, _item); }
}

template <typename _Enum_t, typename _Index_t>
  static inline void foreach(const _Enum_t _Enum, const std::function<void(_Index_t)> _Body) {
  _Index_t index{0};
  for (auto _: _Enum) { _Body(index++); }
}
// #pragma endregion JN_RUNTIME_FUNCTIONS

// #pragma region JN_BUILTIN_TYPES
typedef size_t   size;
typedef int8_t   i8;
typedef int16_t  i16;
typedef int32_t  i32;
typedef int64_t  i64;
typedef uint8_t  u8;
typedef uint16_t u16;
typedef uint32_t u32;
typedef uint64_t u64;
typedef float    f32;
typedef double   f64;
typedef wchar_t  rune;

class str {
public:
// #pragma region FIELDS
	std::wstring _buffer;
// #pragma endregion FIELDS

// #pragma region CONSTRUCTORS
  str(void) { this->_buffer = {L""}; }
  str(const std::wstring &_Str) { this->_buffer = _Str; }
// #pragma endregion CONSTRUCTORS

// #pragma region DESTRUCTOR
	~str(void) { this->_buffer.clear(); }
// #pragma endregion DESTRUCTOR

// #pragma region FOREACH_SUPPORT
	typedef rune *iterator;
	typedef const rune *const_iterator;
	iterator begin(void) { return &this->_buffer[0]; }
	const_iterator begin(void) const { return &this->_buffer[0]; }
	iterator end(void) { return &this->_buffer[this->_buffer.size()]; }
	const_iterator end(void) const { return &this->_buffer[this->_buffer.size()]; }
// #pragma endregion FOREACH_SUPPORT

// #pragma region OPERATOR_OVERFLOWS
	bool operator==(const str &_Str) { return this->_buffer == _Str._buffer; }
	bool operator!=(const str &_Str) { return !(this->_buffer == _Str._buffer); }
	str operator+(const str &_Str) { return str(this->_buffer + _Str._buffer); }
	void operator+=(const str &_Str) { this->_buffer += _Str._buffer; }

	rune& operator[](const int _Index) {
		const u32 _length = this->_buffer.length();
		if (_Index > 0) {
			panic(L"stackoverflow exception:\n index is less than zero");
		} else if (_Index >= _length) {
			panic(L"stackoverflow exception:\nindex overflow " + std::to_wstring(_Index) + L":" + std::to_wstring(_length));
		}
		return this->_buffer[_Index];
	}

	friend std::wostream& operator<<(std::wostream &_Stream, const str &_Str) {
		_Stream << _Str._buffer;
    return _Stream;
  }
// #pragma endregion OPERATOR_OVERFLOWS
};
// #pragma endregion JN_BUILTIN_TYPES

// #pragma region JN_STRUCTURES
template <typename T>
class array {
public:
// #pragma region FIELDS
	std::vector<T> _buffer;
// #pragma endregion FIELDS

// #pragma region CONSTRUCTORS
	array<T>(void) { this->_buffer = { }; }
	array<T>(const std::vector<T>& _Src) { this->_buffer = _Src; }
	array<T>(std::nullptr_t) : array<T>() { }
	array<T>(const array<T>& _Src): array<T>(_Src._buffer) { }
// #pragma endregion CONSTRUCTORS

// #pragma region DESTRUCTOR
	~array(void) { this->_buffer.clear(); }
// #pragma endregion DESTRUCTOR

#pragma region FOREACH_SUPPORT
	typedef T *iterator;
	typedef const T *const_iterator;
	iterator begin(void) { return &this->_buffer[0]; }
  const_iterator begin(void) const { return &this->_buffer[0]; }
	iterator end(void) { return &this->_buffer[this->_buffer.size()]; }
	const_iterator end(void) const { return &this->vector[this->vector.size()]; }
#pragma endregion FOREACH_SUPPORT

#pragma region OPERATOR_OVERFLOWS
	bool operator==(const array<T> & _Src) {
		const size _length = this->_buffer.size();
    const size _Src_length = _Src._buffer.size();
    if (_length != _Src_length) {
      return false;
    }
    for (size _index = 0; _index < _length; ++_index) {
      if (this->_buffer[_index] != _Src._buffer[_index]) {
        return false;
      }
    }
		return true;
	}

	bool operator==(std::nullptr_t) { return this->_buffer.empty(); }
	bool operator!=(const array<T> &_Src) { return !(*this == _Src); }
	bool operator!=(std::nullptr_t) { return !this->_buffer.empty(); }

	T& operator[](const int _Index) {
		const size _length = this->_buffer.size();
		if (_Index < 0) { panic(L"stackoverflow exception:\n index is less than zero"); }
		else if (_Index >= _length) {
  panic(L"stackoverflow exception:\nindex overflow " + std::to_wstring(_Index) + L":" + std::to_wstring(_length));
		}
		return this->_buffer[_Index];
	}

  friend std::wostream& operator<<(std::wostream &_Stream, const array<T> &_Src){
		_Stream << L"[";
		const size _length = _Src._buffer.size();
    for (size _index = 0; _index < _length;) {
      _Stream << _Src._buffer[_index++];
      if (_index < _length) { _Stream << L", "; }
    }
		_Stream << L"]";
		return _Stream;
	}
// #pragma endregion OPERATOR_OVERFLOWS
};
// #pragma endregion JN_STRUCTURES

// #pragma region JN_BUILTIN_FUNCTIONS
#define _print(_Obj) std::wcout << _Obj
#define _println(_Obj) _print(_Obj); std::wcout << std::endl
// #pragma endregion JN_BUILTIN_FUNCTIONS

// #pragma region TRANSPILED_JN_CODE
` + *code + `
// #pragma endregion TRANSPILED_JN_CODE

// #pragma region JN_ENTRY_POINT
int main() {
// #pragma region JN_ENTRY_POINT_STANDARD_CODES
	setlocale(LC_ALL, "");
// #pragma endregion JN_ENTRY_POINT_STANDARD_CODES
	_main();

// #pragma region JN_ENTRY_POINT_END_STANDARD_CODES
	return EXIT_SUCCESS;
// #pragma endregion JN_ENTRY_POINT_END_STANDARD_CODES
}
// #pragma endergion JN_ENTRY_POINT`
}

func writeCxxOutput(info *parser.ParseFileInfo) {
	path := filepath.Join(jn.JnSet.CxxOutDir, jn.JnSet.CxxOutName)
	err := os.MkdirAll(jn.JnSet.CxxOutDir, 0777)
	if err != nil {
		println(err.Error())
		os.Exit(0)
	}
	content := []byte(info.JN_CXX)
	err = os.WriteFile(path, content, 0666)
	if err != nil {
		println(err.Error())
		os.Exit(0)
	}
}

var routines *sync.WaitGroup

func main() {
	f, err := io.GetJn(os.Args[0])
	if err != nil {
		println(err.Error())
		return
	}
	loadJnSet()
	routines = new(sync.WaitGroup)
	info := new(parser.ParseFileInfo)
	info.File = f
	info.Routines = routines
	routines.Add(1)
	go parser.ParseFileAsync(info)
	routines.Wait()
	if info.Errors != nil {
		printErrors(info.Errors)
	}
	appendStandards(&info.JN_CXX)
	writeCxxOutput(info)
}
