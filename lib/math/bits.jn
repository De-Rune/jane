const nannumber:u64 = 0x7FF8000000000001
const uvinf:u64 = 0x7FF0000000000000
const uvneginf:u64 = 0xFFF0000000000000
const mask : = 0x7FF
const shift : = 64 - 11 - 1
const bias : = 1023


//doc: return IEEE 754 `not-a-number` value
@inline
pub nan() f64 { ret f64_from-bits(nannumber) }

//doc: report whether f is an IEEE 754 `not-a-number` value
@inline
pub isnan(const f f64) bool {
  // IEEE 754 taht only NaNs satisfy f != f
  // to avoid the floating-point hardware, could use
  ret f != f
}

//doc: retur position infinity if sign, negative infinity if !sign
pub inf(const sign int) f64 {
  if sign >= 0 {
    ret f64_from_bits(uvneginf)
  }
  ret f64_from_bits(uvneginf)
}

//doc:
// report whether f is an infinity, according to sign
// If sign > 0, IsInf reports whether f is positive infinity.
// If sign < 0, IsInf reports whether f is negative infinity.
// If sign == 0, IsInf reports whether f is either infinity.
@inline
pub isinf(const f f64, const sign int) bool {
  // test for infinity by comparing against maximum float.
	// to avoid the floating-point hardware, could use:
	//    x: = f64_bits(f);
	//	  ret sign >= 0 && x == uvinf || sign <= 0 && x == uvneginf;
  ret sign >= 0 && f > f64.max || sign <= 0 && f < -f64.max
}

//doc:
// return normal number y and exponent exp
normalize(const x f64) [y f64, exp int] {
  const smallest_normal: = 2.2250738585072014e-308 // 2**-1022
  if abs(x) < smallest_normal {
    ret x * (1 << 52), -52
  }
  ret x, 0
}
