// The original C code and the long comment below are
// from FreeBSD's /usr/src/lib/msun/src/e_sqrt.c and
// came with this notice. The X code is a simplified
// version of the original C.
//
// ====================================================
// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
//
// Developed at SunPro, a Sun Microsystems, Inc. business.
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
// Method:
//   Bit by bit method using integer arithmetic. (Slow, but portable)
//   1. Normalization
//      Scale x to y in [1,4) with even powers of 2:
//      find an integer k such that  1 <= (y=x*2**(2k)) < 4, then
//              sqrt(x) = 2**k * sqrt(y)
//   2. Bit by bit computation
//      Let q  = sqrt(y) truncated to i bit after binary point (q = 1),
//           i                                                   0
//                                     i+1         2
//          s  = 2*q , and      y  =  2   * ( y - q  ).          (1)
//           i      i            i                 i
//
//      To compute q    from q , one checks whether
//                  i+1       i
//
//                            -(i+1) 2
//                      (q + 2      )  <= y.                     (2)
//                        i
//                                                            -(i+1)
//      If (2) is false, then q   = q ; otherwise q   = q  + 2      .
//                             i+1   i             i+1   i
//
//      With some algebraic manipulation, it is not difficult to see
//      that (2) is equivalent to
//                             -(i+1)
//                      s  +  2       <= y                       (3)
//                       i                i
//
//      The advantage of (3) is that s  and y  can be computed by
//                                    i      i
//      the following recurrence formula:
//          if (3) is false
//
//          s     =  s  ,       y    = y   ;                     (4)
//           i+1      i          i+1    i
//
//      otherwise,
//                         -i                      -(i+1)
//          s     =  s  + 2  ,  y    = y  -  s  - 2              (5)
//           i+1      i          i+1    i     i
//
//      One may easily use induction to prove (4) and (5).
//      Note. Since the left hand side of (3) contain only i+2 bits,
//            it is not necessary to do a full (53-bit) comparison
//            in (3).
//   3. Final rounding
//      After generating the 53 bits result, we compute one more bit.
//      Together with the remainder, we can decide whether the
//      result is exact, bigger than 1/2ulp, or less than 1/2ulp
//      (it will never equal to 1/2ulp).
//      The rounding mode can be detected by checking whether
//      huge + tiny is equal to huge, and whether huge - tiny is
//      equal to huge for some floating point number "huge" and "tiny".
//
//doc:
// return the square root of x reference from
// sun microsystem manual
pub sqrt(const x f64) f64 {
  if x == 0 || isnan(x) || isinf(x, 1) {
    ret x
  } else if x < 0 {
    ret nan()
  }
  ix: = f64_bits(x)
  // normalize x
  exp: = int((ix >> shift) & mask)
  if exp == 0 {
    iter ix&(1 << shift) == 0 {
      ix <<= 1
      exp--
    }
    exp++
  }
  // unbias exponent
  exp -= bias
  ix &= ~(mask << shift)
  ix |= 1 << shift
  if exp&1 == 1 {
    ix <<= 1
  }
  // exp = exp / 2, exponent of square root
  exp >>= 1
  // generate sqrt(x) bit by bit
  ix <<= 1
  q:u64 // q = sqrt(x)
  s:u64
  r: = u64(1 << (shift + 1))
  iter r != 0 {
    t := s + r
    if t <= ix {
      s = t + r
      ix -= t
      q += r
    }
    ix <<= 1
    r >>= 1
  }
  // round
  // remainder, result not exact
  if ix != 0 {
    // round according to extra bit
    q += q & 1
  }
  // significand + biased exponent
  ix = q >> 1 + u64(exp-1+bias) << shift
  ret f64_from_bits(ix)
}
