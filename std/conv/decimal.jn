// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.19/src/strconv/decimal.go and came with this notice.

const uint_size = 32 << (^uint(0) >> 63)
const max_shift = uint_size - 4

// cheat sheet for left shift: table indexed by shift count giving
// number of new digit that will be introduced by that shift
struct LeftCheat {
  delta: int
  cutoff: str
}

let leftcheats: []LeftCheat = [
  {0, ""},
	{1, "5"},                                           // * 2
	{1, "25"},                                          // * 4
	{1, "125"},                                         // * 8
	{2, "625"},                                         // * 16
	{2, "3125"},                                        // * 32
	{2, "15625"},                                       // * 64
	{3, "78125"},                                       // * 128
	{3, "390625"},                                      // * 256
	{3, "1953125"},                                     // * 512
	{4, "9765625"},                                     // * 1024
	{4, "48828125"},                                    // * 2048
	{4, "244140625"},                                   // * 4096
	{4, "1220703125"},                                  // * 8192
	{5, "6103515625"},                                  // * 16384
	{5, "30517578125"},                                 // * 32768
	{5, "152587890625"},                                // * 65536
	{6, "762939453125"},                                // * 131072
	{6, "3814697265625"},                               // * 262144
	{6, "19073486328125"},                              // * 524288
	{7, "95367431640625"},                              // * 1048576
	{7, "476837158203125"},                             // * 2097152
	{7, "2384185791015625"},                            // * 4194304
	{7, "11920928955078125"},                           // * 8388608
	{8, "59604644775390625"},                           // * 16777216
	{8, "298023223876953125"},                          // * 33554432
	{8, "1490116119384765625"},                         // * 67108864
	{9, "7450580596923828125"},                         // * 134217728
	{9, "37252902984619140625"},                        // * 268435456
	{9, "186264514923095703125"},                       // * 536870912
	{10, "931322574615478515625"},                      // * 1073741824
	{10, "4656612873077392578125"},                     // * 2147483648
	{10, "23283064365386962890625"},                    // * 4294967296
	{10, "116415321826934814453125"},                   // * 8589934592
	{11, "582076609134674072265625"},                   // * 17179869184
	{11, "2910383045673370361328125"},                  // * 34359738368
	{11, "14551915228366851806640625"},                 // * 68719476736
	{12, "72759576141834259033203125"},                 // * 137438953472
	{12, "363797880709171295166015625"},                // * 274877906944
	{12, "1818989403545856475830078125"},               // * 549755813888
	{13, "9094947017729282379150390625"},               // * 1099511627776
	{13, "45474735088646411895751953125"},              // * 2199023255552
	{13, "227373675443232059478759765625"},             // * 4398046511104
	{13, "1136868377216160297393798828125"},            // * 8796093022208
	{14, "5684341886080801486968994140625"},            // * 17592186044416
	{14, "28421709430404007434844970703125"},           // * 35184372088832
	{14, "142108547152020037174224853515625"},          // * 70368744177664
	{15, "710542735760100185871124267578125"},          // * 140737488355328
	{15, "3552713678800500929355621337890625"},         // * 281474976710656
	{15, "17763568394002504646778106689453125"},        // * 562949953421312
	{16, "88817841970012523233890533447265625"},        // * 1125899906842624
	{16, "444089209850062616169452667236328125"},       // * 2251799813685248
	{16, "2220446049250313080847263336181640625"},      // * 4503599627370496
	{16, "11102230246251565404236316680908203125"},     // * 9007199254740992
	{17, "55511151231257827021181583404541015625"},     // * 18014398509481984
	{17, "277555756156289135105907917022705078125"},    // * 36028797018963968
	{17, "1387778780781445675529539585113525390625"},   // * 72057594037927936
	{18, "6938893903907228377647697925567626953125"},   // * 144115188075855872
	{18, "34694469519536141888238489627838134765625"},  // * 288230376151711744
	{18, "173472347597680709441192448139190673828125"}, // * 576460752303423488
	{19, "867361737988403547205962240695953369140625"}, // * 1152921504606846976
]

struct Decimal {
  d: [800]byte
  nd: int
  dp: int
  neg: bool
  trunc: bool
}

impl Decimal {
  fn assign(mut self, mut v: u64) {
    let mut buf: [24]byte = []
    // write reserved decimal in buf
    let mut n = 0
    for v > 0 {
      let v1 = v / 10
      v -= 10 * v1
      buf[n] = byte(v + '0')
      n++
      v = v1
    }
    // reverse again to procedure forward decimal in a.d
    self.nd = 0
    n--
    for n >= 0; n-- {
      self.d[self.nd] = buf[n]
      self.nd++
    }
    self.dp = self.nd
    unsafe { trim(&self) }
  }

  fn shift(mut self, mut k: int) {
    match {
      | self.nd == 0:
        // nothing todo: a == 0
      | k > 0:
        for k > max_shift {
          unsafe { self_shift(&self, max_shift) }
          k -= max_shift
        }
        unsafe { left_shift(&self, uint(k)) }
      | k < 0:
        for k < -max_shift {
          unsafe { right_shift(&self, max_shift) }
          k += max_shift
        }
        unsafe { right_shift(&self, uint(-k)) }
    }
  }

  fn round_down(mut self, nd: int) {
    if nd < 0 || nd >= self.nd {
      ret
    }
    self.nd = nd
    unsafe { trim(&self) }
  }

  fn round_up(mut self, nd: int) {
    if nd < 0 || nd >= self.nd {
      ret
    }

    let mut i = nd - 1
    for i >= 0; i-- {
      let c = self.d[i]
      if c < '9' {
        self.d[i]++
        self.nd = i + 1
        ret
      }
    }
    self.d[0] = '1'
    self.nd = 1
    self.dp++
  }
  fn round(mut self, nd: int) {
    if nd < 0 || nd >= self.nd {
      ret
    }
    if (unsafe { should_round_up(&self, nd)} ) {
      self.round_up(nd)
    } else {
      self.round_down(nd)
    }
  }

  fn rounded_integer(mut self): u64 {
    if self.dp > 20 {
      ret 0xFFFFFFFFFFFFFFFF
    }
    let mut i: int = 0
    let mut n: u64 = 0
    for i < self.dp && i < self.nd; i++ {
      n = n*10 + u64(self.d[i]-'0')
    }
    for i < self.dp; i++ {
      n *= 10
    }
    if (unsafe {should_round_up(&self, self.dp)} ) {
      n++
    }
    ret n
  }
}

fn digit_zero(mut dst: []byte): int {
  for i in dst {
    dst[i] = '0'
  }
  ret dst.len
}

unsafe fn trim(mut a: *Decimal) {
  for a.nd > 0 && a.d[a.nd-1] == '0' {
    a.nd--
  }
  if a.nd == 0 {
    a.dp = 0
  }
}

unsafe fn right_shift(mut a: *Decimal, k: uint) {
  let mut r = 0
  let mut w = 0
  let mut n: uint = 0
  for n >> k == 0; r++ {
    if r >= a.nd {
      if n == 0 {
        a.nd = 0
        ret
      }
      for n >> k == 0 {
        n = n * 10
        r++
      }
      break
    }
    let c = uint(a.d[r])
    n = n*10 + c - '0'
  }
  a.dp -= r - 1

  let mask: uint = (1 << k) - 1

  for r < a.nd; r++ {
    let c = uint(a.d[r])
    let dig = n >> k
    n &= mask
    a.d[w] = byte(dig + '0')
    w++
    n = n*10 + c - '0'
  }

  for n > 0 {
    let dig = n >> k
    n &= mask
    if w < a.d.len {
      a.d[w] = byte(dig + '0')
      w++
    } else if dig > 0 {
      a.trunc = true
    }
    n = n * 10
  }
  a.nd = w
  trim(a)
}

// leading prefix of b lexicograpically less than s
fn prefix_is_less_than(b: []byte, s: str): bool {
  let mut i = 0
  for i < s.len; i++ {
    if i >= b.len {
      ret true
    }
    if b[i] != s[i] {
      ret b[i] < s[i]
    }
  }
  ret false
}

unsafe fn left_shift(mut a: *Decimal, k: uint) {
  let mut delta = leftcheats[k].delta
  if prefix_is_less_than(a.d[0:a.nd], leftcheats[k].cutoff) {
    delta--
  }
  let mut r = a.nd
  let mut w = a.nd + delta

  let mut n: uint = 0
  r--
  for r >= 0; r-- {
    n += (uint(a.d[r]) - '0') << k
    let quo = n / 10
    let rem = n - 10*quo
    w--
    if w < a.d.len {
      a.d[w] = byte(rem + '0')
    } else if rem != 0 {
      a.trunc = true
    }
    n = quo
  }
  a.nd += delta
  if a.nd >= a.d.len {
    a.nd = a.d.len
  }
  a.dp += delta
  trim(a)
}

unsafe fn should_round_up(a: *Decimal, nd: int): bool {
  if nd < 0 || nd >= a.nd {
    ret false
  }
  if a.d[nd] == '5' && nd+1 == a.nd {
    if a.trunc {
      ret true
    }
    ret nd > 0 && (a.d[nd-1]-'0')%2 != 0
  }
  ret a.d[nd] >= '5'
}
