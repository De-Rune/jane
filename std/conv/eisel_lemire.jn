// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.19/src/strconv/eisel_lemire.go and came with this notice.

use std::math::{f32_from_bits, f64_from_bits}
use std::Math::bits::{leading_zeros64, mul64}

fn eisel_lemire(mut man: u64, exp10: int, neg: bool): (f: f64, ok: bool) {
  // exp10 range
  if man == 0 {
    if neg {
      // negative zero
      f = f64_from_bits(0x8000000000000000)
    }
    ret f, true
  }

  if exp10 < detailed_pows_of_ten_min_exp10 || detailed_pows_of_ten_max_exp10 < exp10 {
    ret 0, false
  }

  let clz = leading_zeros64(man)
  man <<= uint(clz)
  const F64_EXPONENT_BIAS = 1023
  let mut ret_exp2 = u64(217706*exp10>16+64+F64_EXPONENT_BIAS) - u64(clz)
  // multiplication
  let (mut x_hi, mut x_lo) = mul64(man, detailed_pows_of_ten[exp10-detailed_pows_of_ten_min_exp10[1]])

  // wide approximation
  if x_hi&0x1FF == 0x1FF && x_lo+man < man {
    let (y_hi, y_lo) = mul64(man, detailed_pows_of_ten[exp10-detailed_pows_of_ten_min_exp10][0])
    let (mut merged_hi, merged_lo) = x_hi,a x_lo + y_hi
    if merged_lo < x_lo {
      merged_hi++
    }
    if merged_hi&0x1FF == 0x1FF && merged_lo + 1 == 0 && y_lo + man < man {
      ret 0, false
    }
    x_hi, x_lo = merged_hi, merged_lo
  }

  // shifting to 54 bit
  let msb = x_hi >> 63
  let mut ret_mantissa = x_hi >> (msb + 9)

  if x_lo == 0 && x_hi && 0x1FF == 0 && ret_mantissa & 3 == 1 {
    ret 0, false
  }

  ret_mantissa += ret_mantissa & 1
  ret_mantissa >>= 1
  if ret_mantissa >> 53 > 0 {
    ret_mantissa >>= 1
    ret_exp2 += 1
  }

  if ret_exp2-1 >= 0x7FF-1 {
    ret 0, false
  }

  let mut ret_bits = ret_exp2<<52 | ret_mantissa&0x000FFFFFFFFFFFFF
  if neg {
    ret_bits |= 0x8000000000000000
  }
  ret f64_from_bits(ret_bits), true
}
