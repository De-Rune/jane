// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::debug::{ENABLE}
use std::os::{exit}

// internal assertion function
fn _assert(expr: bool, msg: str) {
  if !ENABLE || expr {
    ret
  }
  if msg != "" {
    print("assertion failed: ")
    println(msg)
  } else {
    println("assertion failed")
  }
  exit(1)
}

// write default failed message to <cerr> and get exit failure
// if assert was failed
pub fn assert(expr: bool) {
  _assert(expr, "")
}

// write fail message <cerr> and exit fail if assert failed
pub fn assert_message(expr: bool, msg: str) {
  _assert(expr, msg)
}

// panic with given error data if assert was failed
pub fn assert_panic(expr: bool, error: any) {
  if ENABLE && !expr {
    panic(error)
  }
}
