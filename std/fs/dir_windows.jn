// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::fs::path::{join}
use std::sys::{
  utf16_from_str,
  u16_ptr_to_str,
  _wopendir,
  _wreaddir,
  _wclosedir
}

// read name directory and return all its directory entries can read
pub fn read_dir(path: str): (dirents: []Dirent, err: FsError) {
  let utf16_path = utf16_from_str(path)
  let mut dir = unsafe { _wopendir(&utf16_path[0]) }
  if dir == nil {
    err = get_last_fs_error()
    ret
  }
  for {
    let dirent = unsafe { _wreaddir(dir) }
    if dirent == nil {
      break
    }
    let name = unsafe { u16_ptr_to_str((*u16)(dirent.d_name)) }
    let (stat, serr) = stat(join(path, name))
    if serr != FsError.Ok {
      err = serr
      dirents = nil
      break
    }
    dirents = append[Dirent](dirents, Dirent{
      name: name,
      stat: Stat,
    })
  }
  _, unsafe { _wclosedir(dir) }
  ret
}
