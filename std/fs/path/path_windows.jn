// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.20.1/src/path/filepath/path_windows.go and came with this notice.

use std::sys::{get_full_path_name, utf16_from_str, utf16_to_str}

fn is_slash(c: u8): bool {
  ret c == '\\' || c == '/'
}

pub fn is_abs(mut path: str): bool {
  let l = volume_name_len(path)
  if l == 0 {
    ret false
  }
  // if the volume name start with a double slash, this is an absolute path
  if is_slash(path[0]) && is_slash(path[1]) {
    ret true
  }
  path = path[l:]
  if path == "" {
    ret false
  }
  ret is_slash(path[0])
}

// return length of leading volumen name on windows
// information: https://learn.microsoft.com/en-us/dotnet/standard/io/file-path-formats
fn volume_name_len(path: str): int {
  if path.len < 2 {
    ret 0
  }
  let c = path[0]
  if path[1] == ':' && ('a' <= c && c <= 'z' || 'A' <= c && c <= 'Z') {
    ret 2
  }
  if !is_slash(path[0]) || !is_slash(path[1]) {
    ret 0
  }
  let (p1, mut rest, _) = cut_path(path[2:])
	let mut p2 = ""
	let mut ok = false
	p2, rest, ok = cut_path(rest)
  if !ok {
    ret path.len
  }
  if p1 != "." && p1 != "?" {
    ret path.len - rest.len - 1
  }
  // this is a DOS device path
  if p2.len == 3 && to_upper(p2[0]) == 'U' && to_upper(p2[1]) == 'N' && to_upper(p2[2]) == 'C' {
    _, rest, _ = cut_path(rest)
    _, rest, ok = cut_path(rest)
    if !ok {
      ret path.len
    }
  }
  ret path.len - rest.len - 1
}

// slice path around the first path separator
fn cut_path(path: str): (before: str, after: str, found: bool) {
  for i in path {
    if is_slash(path[i]) {
      ret path[:i], path[i+1:], true
    }
  }
  ret path, "", false
}

fn full_path(name: str): (path: str, ok: bool) {
  let utf16_name = utf16_from_str(name)
	let p = &utf16_name[0]
	let mut n: u32 = 100
  for {
    let mut buff = make([]u16, n)
    n = unsafe { get_full_path_name(p, u32(buff.len), &buff[0], nil) }
    if n == 0 {
      ret "", false
    }
    if n <= u32(buff.len) {
      ret utf16_to_str(buff[:n]), true
    }
  }
  ret "", false
}

fn __abs(mut path: str): (str, ok: bool) {
  if path == "" {
    path = "."
  }
  path, ok = full_path(path)
  if !ok {
    ret "", false
  }
  ret clean(path), true
}

fn __join(elem: ...str): str {
  let mut s = ""
  let mut last_char: byte = 0
  for (_, mut e) in elem {
    match {
      | s.len == 0:
        // add first non-empty path element unchanged
      | is_slash(last_char):
        // if path ends in slash, strip any leading slashes from the next
        // path element to avoid creating a UNC path (any path starting
        // with "\\") from non-UNC element
        for e.len > 0 && is_slash(e[0]) {
          e = e[1:]
        }
      | last_char == ":":
        // if path end in a colon, keep the path relative to the current
        // directory on drive and don't add a separator, preserve leading
        // slashes in the next path element, which may make path absolute
      |:
        s += "\\"
        last_char = '\\'
    }
    if e.len > 0 {
      s += e
      last_char = e[e.len-1]
    }
  }
  if s.len == 0 {
    ret ""
  }
  ret clean(s)
}
