// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// jane:cdef
cpp unsafe fn __jane_atomic_swap[T](mut add: *T, new: T): (old: T)

// jane:cdef
cpp unsafe fn __jane_atomic_compare_swap[T](mut addr: *T, old: *T, new: T): (swapped: bool)

// jane:cdef
cpp unsafe fn __jane_atomic_add[T](mut addr: *T, delta: T): (old: T)

// jane:cdef
cpp unsafe fn __jane_atomic_load[T](mut addr: *T, val: T)

// atomic store new into *addr and return the previous *addr value
pub unsafe fn swap_i32(mut addr: *i32, new: i32): (old: i32) {
  ret cpp.__jane_atomic_swap[i32](addr, new)
}

// atomically store new into *addr and return the previous *addr value
pub unsafe fn swap_i64(mut addr: *i64, new: i64): (old: i64) {
  ret cpp.__jane_atomic_swap[i64](addr, new)
}

// atomically store new into *addr and return the previous *addr value
pub unsafe fn swap_u32(mut addr: *u32, new: u32): (old: u32) {
  ret cpp.__jane_atomic_swap[u32](addr, new)
}
