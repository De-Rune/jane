// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
//
// Developed at SunPro, a Sun Microsystems, Inc. business.
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
//
//
// asinh(x)
// Method :
//  Based on
//          asinh(x) = sign(x) * log [ |x| + sqrt(x*x+1) ]
//  we have
//  asinh(x) := x  if  1+x*x=1,
//           := sign(x)*(log(x)+ln2)) for large |x|, else
//           := sign(x)*log(2|x|+1/(|x|+sqrt(x*x+1))) if|x|>2, else
//           := sign(x)*log1p(|x| + x**2/(1 + sqrt(1+x**2)))
//
// The original C code, the long comment, and the constants
// below are from FreeBSD's /usr/src/lib/msun/src/s_asinh.c
// DeRuneLabs make Simple Jane Code

pub asinh(x f64) f64 {
  const LN2 : = 6.93147180559945286227e-01
  const NEAR_ZERO: = 1.0 / (1 << 28)
  const LARGE: = 1 << 20

  if isnan(x) || isninf(x, 0) {
    ret x
  }
  sign: = false
  if x < 0 {
    x = -x
    sign = true
  }
  temp: f64
  match {
    case x > LARGE:
      temp = log(x) + LN2
    case x > 2:
      temp = log(2*x + 1/(sqrt(x*x+1)+x))
    case x < NEAR_ZERO:
      temp = x
    default:
      temp = log1p(x + x*x/(1+sqrt(1+x*x)))
  }

  if sign {
    temp = -temp
  }
  ret temp
}
