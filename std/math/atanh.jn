// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
//
// Developed at SunPro, a Sun Microsystems, Inc. business.
// Permission to use, copy, modify, and distribute this
// software is freely granted, provided that this notice
// is preserved.
// ====================================================
//
//
// __ieee754_atanh(x)
// Method :
//  1. Reduce x to positive by atanh(-x) = -atanh(x)
//  2. For x>=0.5
//              1              2x                          x
//  atanh(x) = --- * log(1 + -------) = 0.5 * log1p(2 * --------)
//              2             1 - x                      1 - x
//
//  For x<0.5
//  atanh(x) = 0.5*log1p(2x+2x*x/(1-x))
//
// Special cases:
//  atanh(x) is NaN if |x| > 1 with signal;
//  atanh(NaN) is that NaN with no signal;
//  atanh(+-1) is +-INF with signal.
// The original C code, the long comment, and the constants
// below are from FreeBSD's /usr/src/lib/msun/src/e_atanh.c
// DeRuneLabs make Simple Jane Code

pub atanh(x f64) f64 {
  const NEAR_ZERO: = 1.0 / (1 << 28)
  match {
    case x < -1 || x > 1 || isnan(x):
      ret nan()
    case x == 1:
      ret inf(1)
    case x == -1:
      ret inf(-1)
  }
  sign: = false
  if x < 0 {
    x = -x
    sign = true
  }
  temp: f64

  match {
    case x < NEAR_ZERO:
      temp = x
    case x < 0.5:
      temp = x + x
      temp = 0.5 * log1p(temp+temp*x/(1-x))
    default:
      temp = 0.5 * log1p((x+x)/(1-x))
  }

  if sign {
    temp = -temp
  }
  ret temp
}
