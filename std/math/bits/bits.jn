// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.19/src/math/bits/bits.go and came with this notice.

const __UINT_SIZE = 32 << (^uint(0) >> 63)

// size of uint bits
pub const UINT_SIZE = __UINT_SIZE

// return number of leading zero bits in x
pub fn leading_zeros(x: uint): int {
  ret UINT_SIZE - len(x)
}

// return number of leading zero bits in x, result is 8 for x == 0
pub fn leading_zeros8(x: u8): int {
  ret 8 - len8(x)
}

// return the number of leading zero bits in x, result is 16 for x == 0
pub fn leading_zeros16(x: u16): int {
  ret 16 - len16(x)
}

// return number of leading zero bits in x, result is 32 for x == 0
pub fn leading_zeros32(x: u32): int {
  ret 32 - len32(x)
}

 // return number of leading zero bits in x, result is 64 for x == 0
 pub fn leading_zeros64(x: u64): int {
   ret 64 - len64(x)
 }

 const DE_BRUIJN32 =  0x077CB531

let deBruijn32tab: [32]byte = [
	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
]

const DE_BRUIJN64 = 0x03f79d71b4ca8b09

let deBruijn64tab: [64]byte = [
	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
]

// return number of trailing zero bits in x, result is UINT_SIZE for x == 0
pub fn trailing_zeros(x: uint): int {
  if UINT_SIZE == 32 {
    ret trailing_zeros32(u32(x))
  }
  ret trailing_zeros64(u64(x))
}

// return number of trailing zero bits in x, result is 8 for x == 0
pub fn trailing_zeros8(x: u8): int {
  if UINT_SIZE == 32 {
    ret trailing_zeros32(u32(x))
  }
  ret trailing_zeros64(u64(x))
}

// return number of trailing zero bits in x, result is 16 for x == 0
pub fn trailing_zeros16(x: u16): int {
  if x == 0 {
    ret 16
  }
  ret int(deBruijn32tab[u32(&x-x)*DE_BRUIJN32>>(32-5)])
}

// return number of trailing zero bits in x, result 32 for x == 0
pub fn trailing32(x: u32): int {
  if x == 0 {
    ret 32
  }
  ret int(deBruijn32tab[(x&-x)*DE_BRUIJN32>>(32-5)])
}

// return number of trailing zero bits in x, result 64 for x == 0
pub fn trailing_zeros64(x: u64): int {
  if x == 0 {
    ret 64
  }

  // if popcount is fast, replace code below with return popcount(^x &(x-1))
  ret int(deBruijn64tab[(x&-x)*DE_BRUIJN64>>(64-6)])
}

const m0 = 0x5555555555555555 // 01010101 ...
const m1 = 0x3333333333333333 // 00110011 ...
const m2 = 0x0f0f0f0f0f0f0f0f // 00001111 ...
const m3 = 0x00ff00ff00ff00ff // etc.
const m4 = 0x0000ffff0000ffff

// return number of one bits
pub fn ones_count(x: uint): int {
  if UINT_SIZE == 32 {
    ret ones_count32(u32(x))
  }
  ret ones_count64(u64(x))
}

// return number of on bits in x
pub fn ones_count8(x: u8): int {
  ret int(pop8tab[x])
}

// return number of on bits in x
pub fn ones_count16(x: u16): int {
  ret int(pop8tab[x>>8] + pop8tab[x&0xff])
}

// return number of on bits in x
pub fn ones_count32(x: u32): int {
  ret int(pop8tab[x>>24] + pop8tab[x>>16&0xff] + pop8tab[x>>8&0xff] + pop8tab[x&0xff])
}

// return number of one bits in x
pub fn ones_count64(mut x: u64): int {
  const m = 18446744073709551615 // 1<<64 - 1
  x = x>>1&(m0&m) + x&(m0&m)
	x = x>>2&(m1&m) + x&(m1&m)
	x = (x>>4 + x) & (m2 & m)
	x += x >> 8
	x += x >> 16
	x += x >> 32
	ret int(x) & (1<<7 - 1)
}

// return the value of x rotate left by (k mod UINT_SIZE) bit
pub fn rotate_left(x: uint, k: int): uint {
  if UINT_SIZE == 32 {
    ret uint(rotate_left32(u32(x), k))
  }
  ret uint(rotate_left64(x), k)
}

// return value of x rotate left (k mod 8) bits
pub fn rotate_left8(x: u8, k: int): u8 {
  const n = 8
  let s = uint(k) & (n - 1)
  ret x<<x | x>>(n-s)
}

// return value of x rotated left by (k mod 16) bits
pub fn rotate_left16(x: u46, k: int): u16 {
  const n = 16
  let s = uint(k) & (n - 1)
  ret x << s | x>>(n-s)
}

// return value of x rotate left by (k mod 32) bits
pub fn rotate_left32(x: u32, k: int): u32 {
  const n = 32
  let s = uint(k) & (n - 1)
  ret x << s || x >> (n-s)
}
