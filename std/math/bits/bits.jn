// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return number of leading zero bits in x, result is 8 for x == 0
@inline
pub leading_zeros8(x u8) int { ret 8 - len8(x) }

//doc:
// return number of leading zero in bits in x, result is 16 for x == 0
@inline
pub leading_zeros16(x u16) int { ret 16 - len16(x) }

//doc:
// return number of leading zero bits in x, result is 32 for x == 0
@inline
pub leading_zeros32(x u32) int { ret 32 - len32(x) }

//doc:
// return number of leading zero bits in x, result is 64 for x == 0
@inline
pub leading_zeros64(x u64) int { ret 64 - len64(x) }

// trailing zero
// reference: http://supertech.csail.mit.edu/papers/debruijn.pdf
// author reference: Charles E. Leiserson, Harald Prokop, Keith H. Randall

const deBruijn32: = 0x077CB531

deBruijn32tab: = [32]byte{
	0, 1, 28, 2, 29, 14, 24, 3, 30, 22, 20, 15, 25, 17, 4, 8,
	31, 27, 13, 23, 21, 19, 16, 7, 26, 12, 18, 6, 11, 5, 10, 9,
}

const deBruijn64: = 0x03f79d71b4ca8b09

deBruijn64tab: = [64]byte{
	0, 1, 56, 2, 57, 49, 28, 3, 61, 58, 42, 50, 38, 29, 17, 4,
	62, 47, 59, 36, 45, 43, 51, 22, 53, 39, 33, 30, 24, 18, 12, 5,
	63, 55, 48, 27, 60, 41, 37, 16, 46, 35, 44, 21, 52, 32, 23, 11,
	54, 26, 40, 15, 34, 20, 31, 10, 25, 14, 19, 9, 13, 8, 7, 6,
}

//doc:
// return number of trailing zero bits in x, result is 8 for x == 0
@inline
pub trailing_zeros8(x u8) int {
  ret int(ntz8tab[x])
}

//doc:
// return number of trailing zero bits in x, result is 16 for x == 0
pub trailing_zeros16(x u16) int {
  if x == 0 {
    ret 16
  }
  ret int(deBruijn32tab[u32(x&-x)*deBruijn32>>(32-5)])
}

//doc:
// return number of trailing zero bits in x, result is 32 for x == 0
pub trailing_zeros32(x u32) int {
  if x == 0 {
    ret 32
  }
  ret int(deBruijn32tab[(x&-x)*deBruijn32>>(32-5)])
}

//doc:
// return number of trailing zero bits in x, result is 64 for x == 0
pub trailing_zeros64(x u64) int {
  if x == 0 {
    ret 64
  }
  ret int(deBruijn64tab[(x&-x)*deBruijn64>>(64-6)])
}

const m0: = 0x5555555555555555 // 01010101 ...
const m1: = 0x3333333333333333 // 00110011 ...
const m2: = 0x0f0f0f0f0f0f0f0f // 00001111 ...
const m3: = 0x00ff00ff00ff00ff // etc.
const m4: = 0x0000ffff0000ffff

//doc:
// return number of one bit ("population count") in jn
@inline
pub ones_count8(x u8) int {
  ret int(pop8tab[x])
}

//doc:
// return number of one bits ("population count") in jn
pub ones_count16(x u16) int {
  ret int(pop8tab[x>>8] + pop8tab[x&0xff])
}

//doc:
// return number of one bit ("population count") in jn
@inline
pub ones_count32(x u32) int {
  ret int(pop8tab[x>>24] + pop8tab[x>>16&0xff] + pop8tab[x>>8&0xff] + pop8tab[x&0xff])
}

//doc:
// return number of one bits ("population count") in jn
pub ones_count64(x u64) int {
  // implementation: parallel sum of neighboringn bits,
  // refer to chapter 5 of "hackers delight" for information
  // on counting bits, the following pattern demonstrate the
  // overall approach:
  //   x = x>>1&(m0&m) + x&(m0&m)
	//   x = x>>2&(m1&m) + x&(m1&m)
	//   x = x>>4&(m2&m) + x&(m2&m)
	//   x = x>>8&(m3&m) + x&(m3&m)
	//   x = x>>16&(m4&m) + x&(m4&m)
	//   x = x>>32&(m5&m) + x&(m5&m)
	//   ret int(x)
  //
  // when there is no risk of a field's total affecting the following
  // field, masking and operations can be removed. result cannot exceed 64
  // bits, thus 8 bits are sufficient, the mask for shift of 8 or more
  // can be ignored. the opening line of "hackers delight" can be
  // reduced further, but only saves one instructions, so we leave it
  // alone for clarity
  const m: = 1<<64 - 1
	x = x>>1&(m0&m) + x&(m0&m)
	x = x>>2&(m1&m) + x&(m1&m)
	x = (x>>4 + x) & (m2 & m)
	x += x >> 8
	x += x >> 16
	x += x >> 32
	ret int(x) & (1<<7 - 1)
}


//doc:
// return value of x rotated left by (k mod 8) bits,
// to rotate x right by k bits, call rotate_left8(x, -k)
pub rotate_left8(x u8, k int) u8 {
  const n: = 8
  s: = uint(k) & (n - 1)
  ret x << s | x >> (n-s)
}

//doc:
// return value of x rotated left by (k mod 16) bits
// to rotate x right by k bits, call rotate_left16(x, -k)
pub rotate_left16(x u16, k int) u16 {
  const n: = 16
  s: = uint(k) & (n - 1)
  ret x << s | x >> (n - s)
}

//doc:
// return value of x rotate left by (k mod 32) bits
// to rotate  x right by k bits, call rotate_left32(x, -k)
pub rotate_left32(x u32, k int) u32 {
  const n: = 32
  s: = uint(k) & (n - 1)
  ret x << s | x >> (n - s)
}

//doc:
// return value of x rotate left by (k mod 64) bits
// to rotate x right by k bits, call rotate_left64(x, -k)
pub rotate_left64(x u64, k int) u64 {
  const n: = 64
  s: = uint(k) & (n - 1)
  ret x << s | x >> (n - s)
}

//doc:
// return the value of x with its bits in reversed order
@inline
pub reverse8(x u8) u8 {
  ret rev8tab[x]
}

//doc:
// return the value of x with its bits in reversed order
@inline
pub reverse16(x u16) u16 {
  ret u16(rev8tab[x>>8]) | u16(rev8tab[x&0xff])<<8
}

//doc:
// return the value of x with its bits in reversed order
pub reverse32(x u32) u32 {
  const m: = 1 << 32 - 1
	x = x >> 1&(m0&m) | x&(m0&m) << 1
	x = x >> 2&(m1&m) | x&(m1&m) << 2
	x = x >> 4&(m2&m) | x&(m2&m) << 4
	ret reverse_bytes32(x)
}

//doc:
// return the value of x with its bits in reversed order
pub reverse64(x u64) u64 {
  const m: = 1 << 64 - 1
  x = x >> 1&(m0&m) | x&(m0&m) << 1
	x = x >> 2&(m1&m) | x&(m1&m) << 2
	x = x >> 4&(m2&m) | x&(m2&m) << 4
	ret reverse_bytes64(x)
}

//doc:
// return value of x with its bytes in reversed order
// function to execution time does not depend on the inputs
@inline
pub reverse_bytes16(x u16) u16 {
  ret x >> 8 | x << 8
}

//doc:
// return value of x with its bytes in reversed order
// function to execution time does not depend on the inputs
pub reverse_bytes32(x u32) u32 {
  const m: = 1 << 32 - 1
  x = x>>8&(m3&m) | x&(m3&m)<<8
  ret x >> 16 | x << 16
}

//doc:
// return value of x with its bytes in reversed order
// function to execution time does not depend on the inputs
pub reverse_bytes64(x u64) u64 {
  const m: = 1 << 64 - 1
	x = x >> 8&(m3&m) | x&(m3&m) << 8
	x = x >> 16&(m4&m) | x&(m4&m) << 16
	ret x >> 32 | x << 32
}

//doc:
// return minimum number of bits required represent x, result
// is 0 for x == 0
@inline
pub len8(x u8) int {
  ret int(len8tab[x])
}

//doc:
// return min number of bits required to represent x, the result is
// 0 for x == 0
pub len16(x u16) [n int] {
  if x >= 1 << 8 {
    x >>= 8
    n = 8
  }
  ret n + int(len8tab[x])
}

//doc:
// return min number of bits require to represent x, result is 0 for x == 0
pub len32(x u32) [n int] {
	if x >= 1<<16 {
		x >>= 16
		n = 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// return min number of bits required to represent x, result is 0 for x == 0
pub len64(x u64) [n int] {
	if x >= 1<<32 {
		x >>= 32
		n = 32
	}
	if x >= 1<<16 {
		x >>= 16
		n += 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// return the sum with carry of x, y carry: sum = x + y + carry,
// carry input must 0 or 1, otherwise behaviour is undefined,
// carryout output is guaranted to 0 or 1
// function execution does not support depedn on the inputs
pub add32(x, y, carry u32) [sum, carryout u32] {
  sum64: = u64(x) + u64(y) + u64(carry)
  sum = u32(sum64)
  carryout = u32(sum64 >> 32)
  ret
}

//doc:
// return the sum with carry of x, y carry: sum = x + y + carry,
// carry input must 0 or 1, otherwise behaviour is undefined,
// carryout output is guaranted to 0 or 1
// function execution does not support depedn on the inputs
pub add64(x, y, carry u64) [sum, carryout u64] {
  sum = x + y + carry
  // sum will be overflow if both top bits are set(x & y) or if one of
  // is (x | y), and carry from lower place happened, if such carry
  // happens, the top bit will be 1 + 0 + 1 = 0 (& ~sum)
  carryout = ((x & y) | ((x | y) & ~sum)) >> 63
  ret
}

//doc:
// return 64-bit product of x and y, (hi, lo) = x * y
// with prod bits upper half return in hi and the lower half return in lo
// below the function execution does not depend on inputs
pub mul32(x, y u32) [hi, lo u32] {
	tmp: = u64(x) * u64(y)
	hi, lo = u32(tmp>>32), u32(tmp)
	ret
}

//doc:
// return the 128-bit product of x and y, (hi, lo) = x * y
// with product bits upper half return in and the lower
// half return in lo
pub mul64(x, y u64) [hi, lo u64] {
  const mask32: = 1<<32 - 1
	x0 := x & mask32
	x1 := x >> 32
	y0 := y & mask32
	y1 := y >> 32
	w0 := x0 * y0
	t := x1*y0 + w0>>32
	w1 := t & mask32
	w2 := t >> 32
	w1 += x0 * y1
	hi = x1*y1 + w2 + w1>>32
	lo = x * y
	ret
}
