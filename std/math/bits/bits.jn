// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return number of leading zero bits in x, result is 8 for x == 0
@inline
pub leading_zeros8(x u8) int { ret 8 - len8(x) }

//doc:
// return minimum number of bits required represent x, result
// is 0 for x == 0
@inline
pub len8(x u8) int {
  ret int(len8tab[x])
}

//doc:
// return min number of bits required to represent x, the result is
// 0 for x == 0
pub len16(x u16) [n int] {
  if x >= 1 << 8 {
    x >>= 8
    n = 8
  }
  ret n + int(len8tab[x])
}

//doc:
// return min number of bits require to represent x, result is 0 for x == 0
pub len32(x u32) [n int] {
	if x >= 1<<16 {
		x >>= 16
		n = 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// return min number of bits required to represent x, result is 0 for x == 0
pub len64(x u64) [n int] {
	if x >= 1<<32 {
		x >>= 32
		n = 32
	}
	if x >= 1<<16 {
		x >>= 16
		n += 16
	}
	if x >= 1<<8 {
		x >>= 8
		n += 8
	}
	ret n + int(len8tab[x])
}

//doc:
// return 64-bit product of x and y, (hi, lo) = x * y
// with prod bits upper half return in hi and the lower half return in lo
// below the function execution does not depend on inputs
pub mul32(x, y u32) [hi u32, lo u32] {
	tmp: = u64(x) * u64(y)
	hi, lo = u32(tmp>>32), u32(tmp)
	ret
}
