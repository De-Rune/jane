// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return cube root of x
pub cbrt(x f64) f64 {
  const B1: = 715094163                   // (682-0.03306235651)*2**20
	const B2: = 696219795                   // (664-0.03306235651)*2**20
	const C: = 5.42857142857142815906e-01  // 19/35     = 0x3FE15F15F15F15F1
	const D: = -7.05306122448979611050e-01 // -864/1225 = 0xBFE691DE2532C834
	const E: = 1.41428571428571436819e+00  // 99/70     = 0x3FF6A0EA0EA0EA0F
	const F: = 1.60714285714285720630e+00  // 45/28     = 0x3FF9B6DB6DB6DB6E
	const G: = 3.57142857142857150787e-01  // 5/14      = 0x3FD6DB6DB6DB6DB7
	const SMALLEST_NORMAL: = 2.22507385850720138309e-308 // 2**-1022  = 0x0010000000000000

  // special case
  match {
    case x == 0 || isnan(x) || isinf(x, 0):
      ret x
  }

  sign: = false
  if x < 0 {
    x = -x
    sign = true
  }

  t: = f64_from_bits(f64_bits(x) / 3 + B1 << 32)
  if x < SMALLEST_NORMAL {
    t = f64(1 << 54) // set t = 2 ** 54
    t *= x
    t = f64_from_bits(f64_bits(t) / 3 + B2 << 32)
  }

  r: = t * t / x
	s: = C + r*t
	t *= G + F/(s+E+D/s)

  t = f64_from_bits(f64_bits(t)&(0xFFFFFFFFC<<28) + 1 << 30)

  // newton iteration to 53 bits with error les than 0.667ulps
  s = t * t // t*t is exact
	r = x / s
	w: = t + t
	r = (r - t) / (w + r) // r-s is exact
	t = t + t*r

  // restore the sign bit
  if sign {
    t = -t
  }
  ret t
}
