// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return greatest integer value less than or equal to x
pub floor(x f64) f64 {
  if x == 0 || isnan(x) || isinf(x, 0) {
    ret x
  }

  if x < 0 {
    d:, fract: = modf(-x)
    if fract != 0.0 {
      d = d + 1
    }
    ret -d
  }
  d:, _ = modf(x)
  ret d
}

//doc:
// return least integer value gerater than or equal to x
@inline
pub ceil(x f64) f64 {
  ret -floor(-x)
}

//doc:
// return integer value of x
pub trunc(x f64) f64 {
  if x == 0 || isnan(x) || isinf(x, 0) {
    ret x
  }
  d:, _ = modf(x)
  ret d
}

//doc:
// return nearest integer, rounding half away from zero
pub round(x f64) f64 {
  bits: = f64_bits(x)
  e: = uint(bits >> SHIFT) & MASK
  if e < BIAS {
    bits &= SIGN_MASK
    if e == BIAS-1 {
      bits |= UVONE
    }
  } else if e < BIAS+SHIFT {
    const HALF: = 1 << (SHIFT - 1)
    e -= BIAS
    bits += HALF >> e
    bits &= ~(FRAC_MASK >> e)
  }
  ret f64_from_bits(bits)
}

//doc:
// return nearest integer, rounding ties to even
pub round_even(x f64) f64 {
  bits: = f64_bits(x)
  e: = uint(bits >> SHIFT) & MASK
  if e >= BIAS {
    const half_minus_ULP: = (1 << (SHIFT - 1)) - 1
    e -= BIAS
    bits += (half_minus_ULP + (bits>>(SHIFT-e))&1) >> e
		bits &= ~(FRAC_MASK >> e)
  } else if e == BIAS-1 && bits&FRAC_MASK != e {
    bits = bits&SIGN_MASK | UVONE
  } else {
    bits &= SIGN_MASK
  }
  ret f64_from_bits(bits)
}
