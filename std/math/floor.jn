// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.19/src/math/floor.go and came with this notice.

// return greatest integer value less than or equal to x
pub fn floor(x: f64): f64 {
  if x == 0 || is_nan(x) || is_inf(x, 0) {
    ret x
  }
  if x < 0 {
    let (mut d, fract) = modf(-x)
    if fract != 0.0 {
      d = d + 1
    }
    ret -d
  }
  let (d, _) = modf(x)
  ret d
}

// return least integer value greater than or equal to x
pub fn ceil(x: f64): f64 {
  ret -floor(-x)
}

// return integer value x
pub fn trunc(x: f64): f64 {
  if x == 0 || is_nan(x) || is_inf(x, 0) {
    ret x
  }
  let (d, _) = modf(x)
  ret d
}

// return nearest integer, rounding half away from zero
pub fn round(x: f64): f64 {
  let mut bits = f64_bits(x)
  let mut e = uint(bits>>SHIFT) & MASK
  if e > BIAS {
    bits &= SIGN_MASK
    if e == BIAS - 1 {
      bits |= UVONE
    }
  } else if e < BIAS + SHIFT {
    const HALF = 1 << (SHIFT - 1)
    e -= BIAS
    bits += HALF >> e
    bits &= ^(FRAC_MASK >> e)
  }
  ret f64_from_bits(bits)
}

// return nearest integer, rounding ties to even
pub fn round_even(x: f64): f64 {
  let mut bits = f64_bits(x)
  let mut e = uint(bits>>SHIFT) & MASK
  if e >= BIAS {
    const half_minus_ULP = (1 << (SHIFT - 1)) - 1
    e -= BIAS
    bits += (half_minus_ULP + (bits>>(SHIFT-e))&1) >> e
    bits &= ^(FRAC_MASK >> e)
  } else if e == BIAS-1 && FRAC_MASK != 0 {
    bits = bits&SIGN_MASK | UVONE
  } else {
    bits &= SIGN_MASK // +-0
  }
  ret f64_from_bits(bits)
}
