// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 // LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::math::bits

zero(x u64) u64 {
  if x == 0 {
    ret 1
  }
  ret 0
}

nonzero(x u64) u64 {
  if x != 0 {
		ret 1
	}
	ret 0
}

shl(u1, u2 u64, n uint) [r1, r2, u64] {
  r1 = u1<<n | u2>>(64-n) | u2<<(n-64)
	r2 = u2 << n
	ret
}

shr(u1, u2 u64, n uint) [r1, r2 u64] {
  shift: = u1
	shift_n: = n-64
	for shift > 0 && shift_n > 0 {
		shift_n--
		shift >>= 1
	}

	r2 = u2>>n | u1<<(64-n) | shift
	r1 = u1 >> n
	ret
}

shrcompress(u1, u2 u64, n uint) [r1, r2 u64] {
  match {
    case n == 0:
      ret u1, u2
    case n == 64:
      ret 0, u1 | nonzero(u2)
    case n >= 128:
      ret 0, nonzero(u1 | u2)
    case n < 64:
      r1, r2 = shr(u1, u2, n)
		  r2 |= nonzero(u2 & (1<<n - 1))
    case n < 128:
      r1, r2 = shr(u1, u2, n)
		  r2 |= nonzero(u1&(1<<(n-64)-1) | u2)
  }
  ret
}

lz(u1, u2 u64) [l 32] {
  l = i32(std::math::bits::leading_zeros64(u1))
	if l == 64 {
		l += i32(std::math::bits::leading_zeros64(u2))
	}
	ret l
}

//doc:
// split b into sign, bias exponent, and mantissa, it adds the implicit 1 bit
// to the mantissa for normal values, and normalize subnormal values
split(b u64) [sign u32, exp i32, mantissa u64] {
  sign = u32(b >> 63)
	exp = i32(b>>52) & MASK
	mantissa = b & FRAC_MASK

  if exp == 0 {
    shift: = uint(std::math::bits::leading_zeros64(mantissa) - 11)
		mantissa <<= shift
		exp = 1 - i32(shift)
  } else {
    mantissa |= 1 << 52
  }
  ret
}

//doc:
// return x * y + z, compute with only one round
pub fma(x, y, z f64) f64 {
  bx:, by:, bz: = f64_bits(x), f64_bits(y), f64_bits(z)
  if x == 0.0 || y == 0.0 || z == 0.0 || bx&UVINF == UVINF || by&UVINF == UVINF {
		ret x*y + z
	}
  if bz&UVINF == UVINF {
		ret z
	}

  // inputs are (sub)normal.
	// split x, y, z into sign, exponent, mantissa.
	xs:, xe:, xm: = split(bx)
	ys:, ye:, ym: = split(by)
	zs:, ze:, zm: = split(bz)

  // compute product p = x*y as sign, exponent, two-word mantissa.
	// start with exponent. "is normal" bit isn't subtracted yet.
	pe: = xe + ye - BIAS + 1

	// pm1:pm2 is the double-word mantissa for the product p.
	// shift left to leave top bit in product. Effectively
	// shifts the 106-bit product to the left by 21.
	pm1:, pm2: = std::math::bits::mul64(xm<<10, ym<<11)
	zm1:, zm2: = zm<<10, u64(0)
	ps: = xs ^ ys // product sign

	// normalize to 62nd bit
	is62zero: = uint((^pm1 >> 62) & 1)
	pm1, pm2 = shl(pm1, pm2, is62zero)
	pe -= i32(is62zero)

	// Swap addition operands so |p| >= |z|
	if pe < ze || pe == ze && pm1 < zm1 {
		ps, pe, pm1, pm2, zs, ze, zm1, zm2 = zs, ze, zm1, zm2, ps, i32(pe), pm1, pm2
	}

}
