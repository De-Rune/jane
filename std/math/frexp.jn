// MIT License
// Copyright (c) 2024 - DeRuneLabs
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.

//doc:
// break f into normalized fraction and an integral power of two.
// return frac and exp satisfy f == frac x 2**exp
// with the absolute value of frac in the interval [Â½, 1]
pub frexp(f f64) [frac f64, exp int] {
  match {
    case f == 0:
      ret f, 0
    case isinf(f, 0) || isnan(f):
      ret f, 0
  }
  f, exp = normalize(f)
  x: = f64_bits(f)
  exp += int((x >> shift)&mask) - bias + 1
  x &= ^(mask << shift)
  x |= (-1 + bias) << shift
  frac = f64_from_bits(x)
  ret
}
