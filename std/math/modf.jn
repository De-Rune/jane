// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return integer and frac float-point number that sum to f,
// both value have the same sign as f
pub modf(f f64) [integer f64, frac f64] {
  if f < 1 {
    match {
      case f < 0:
        integer, frac = modf(-f)
        ret -integer, -frac
      case f == 0:
        ret f, f
    }
    ret 0, f
  }
  x: = f64_bits(f)
	e: = uint(x>>SHIFT)&MASK - BIAS

  if e < 64-12 {
		x &= ~(1<<uint(64-12-e) - 1)
	}
	integer = f64_from_bits(x)
	frac = f - integer
	ret
}
