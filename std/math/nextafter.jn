// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return next representation f32 value after x towards y
pub nextafter32(x, y f32) [r f32] {
  match {
    case isnan(f64(x)) || isnan(f64(y)):
      r = f32(nan())
    case x == y:
		  r = x
	  case x == 0:
		  r = f32(copysign(f64(f32_from_bits(1)), f64(y)))
	  case (y > x) == (x > 0):
		  r = f32_from_bits(f32_bits(x) + 1)
	  default:
		  r = f32_from_bits(f32_bits(x) - 1)
  }
  ret
}

//doc:
// return next representable f64 value after x towards y
pub nextafter(x, y f64) [r f64] {
  match {
    case isnan(x) || isnan(y):
      r = nan()
    case x == y:
      r = x
    case x == 0:
      r = copysign(f64_from_bits(1), y)
    case (y > x) == (x > 0):
		  r = f64_from_bits(f64_bits(x) + 1)
	  default:
		  r = f64_from_bits(f64_bits(x) - 1)
  }
  ret
}
