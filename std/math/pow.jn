// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

//doc:
// return x**t, base-x exponential of y
pub pow(x, y f64) f64 {
  match {
    case y == 0 || x == 1:
      ret 1
    case y == 1:
      ret x
    case isnan(x) || isnan(y):
      ret nan()
    case x == 0:
      match {
        case y < 0:
          if is_odd_int(y) {
            ret copysign(inf(1), x)
          }
          ret inf(1)
        case y > 0:
          if is_odd_int(y) {
            ret x
          }
          ret 0
      }
    case isinf(y, 0):
      match {
        case x == -1:
          ret 1
        case (abs(x) < 1) == isinf(y, 1):
          ret 0
        default:
          ret inf(1)
      }
    case isinf(x, 0):
      if isinf(x, -1) {
        ret pow(1/x, -y)
      }

      match {
        case y < 0:
          ret 0
        case y > 0:
          ret inf(1)
      }
    case y == 0.5:
      ret sqrt(x)
    case y == -0.5:
      ret 1 / sqrt(x)
  }
  yi:, yf: = modf(abs(y))
  if yf != 0 && x < 0 {
    ret nan()
  }

  if yi >= 1 << 63 {
    match {
      case x == -1:
        ret 1
      case (abs(x) < 1) == (y > 0):
        ret 0
      default:
        ret inf(1)
    }
  }
  a1: = 1.0
	ae: = 0

  if yf != 0 {
    if yf > 0.5 {
      yf--
      yi++
    }
    a1 = exp(yf * log(x))
  }

  x1:, xe: = frexp(x)
  for i: = i64(yi); i != 0; i >>= 1 {
    if xe < -1 << 12 || 1 << 12 < xe {
      ae += xe
      break
    }
    if i&1 == 1 {
			a1 *= x1
			ae += xe
		}
		x1 *= x1
		xe <<= 1
		if x1 < 0.5 {
			x1 += x1
			xe--
		}
  }
  if y < 0 {
		a1 = 1 / a1
		ae = -ae
	}
	ret ldexp(a1, ae)
}

is_odd_int(x f64) bool {
  xi:, xf: = modf(x)
  ret xf == 0 && i64(xi)&1 == 1
}
