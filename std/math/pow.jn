// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.19/src/math/pow.go and came with this notice.

// return x ** y, base-x exponential of y
pub fn pow(x: f64, y:f64): f64 {
  match {
    | y == 0 | x == 1:
      ret 1
    | y == 1:
      ret x
    | is_nan(x) | is_nan(y):
      ret nan()
    | x == 0:
      match {
        | y < 0:
          if is_odd_int(y) {
            ret copysign(inf(1), x)
          }
          ret inf(1)
        | y > 0:
          if is_odd_int(y) {
            ret x
          }
          ret 0
      }
    | is_inf(y, 0):
      match {
        | x == -1:
          ret 1
        | (abs(x) < 1) == is_inf(y, 1):
          ret 0
        |:
          ret inf(1)
      }
    | is_inf(x, 0):
      if is_inf(x, -1) {
        ret pow(1 / x, -y)
      }
      match {
        | y < 0: ret 0
        | y > 0: ret inf(1)
      }
    | y == 0.5:
      ret sqrt(x)
    | y == -0.5:
      ret 1 / sqrt(x)
  }

  let (mut yi, mut yf) = modf(abs(y))
  if yf != 0 && x < 0 {
    ret nan()
  }
  if yi >= 1 << 63 {
    match {
      | x == -1:
        ret 1
      | (abs(x) < 1) == (y > 0):
        ret 0
      |:
        ret inf(1)
    }
  }

  let mut a1 = 1.0
  let mut ae = 0

  if yf != 0 {
    if yf > 0.5 {
      yf--
      yi++
    }
    a1 = exp(yf * log(x))
  }

  let (mut x1, mut xe) = frexp(x)
  let mut i = i64(yi)
  for i != 0; i >>= 1 {
    if xe < -1 << 12 || 1 << 12 < xe {
      ae += xe
      break
    }
    if i & 1 == 1 {
      a1 *= x1
      ae += xe
    }
    x1 *= x1
    xe <<= 1
    if x1 < 0.5 {
      x1 += x1
      xe--
    }
  }

  if y < 0 {
    a1 = 1 / a1
    ae = -ae
  }
  ret ldexp(a1, ae)
}

fn is_odd_int(x: f64): bool {
  let (xi, xf) = modf(x)
  ret xf == 0 && i64(xi)&1 == 1
}
