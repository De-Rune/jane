// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::sys::{
	get_last_errno,
	EACCES,
	EIO,
	ELOOP,
	ENAMETOOLONG,
	ENOENT,
	ENOTDIR,
	ENOMEM,
	EINVAL
}

pub enum OsError {
	Ok,                 // No problem
	Denied,             // Search permission is denied for a component of the path prefix
	IO,                 // Input/Output error, an error occurred while reading from the file system
	Loop,               // A loop exists in symbolic links encountered during resolution of the path argument
	LongPath,           // The length of the path argument exceeds maxium path length or a pathname component is longer than maximum name length
	NotExist,           // A component of path does not name an existing file or path is an empty string
	NotDir,             // A component of the path prefix is not a directory
	InsufficientMemory, // Insufficient memory to complete the operation
	Divice,             // Divice did not respond
}

fn get_last_os_error(): OsError {
	let err = get_last_errno()
	match err {
	  | EACCES:       ret OsError.Denied
	  | EIO:          ret OsError.IO
	  | ELOOP:        ret OsError.Loop
	  | ENAMETOOLONG: ret OsError.LongPath
	  | ENOENT:       ret OsError.NotExist
	  | ENOTDIR:      ret OsError.NotDir
	  | ENOMEM:       ret OsError.InsufficientMemory
	  |:              ret OsError.Ok
	}
}
