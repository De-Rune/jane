// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::errors
use std::sync::atomic

pub struct WaitGroup {
  task_n: u32
  wait_n: u32
}

impl WaitGroup {
  //doc:
  // increment (+var) or decrement (-var) task count by var
  // and unblokc any wait() call if task count become zero,
  // panic if task count reaches below zero
  pub &add(delta int) {
    old_nr_tasks: = int(std::sync::atomic::add_u32(&.task_n, u32(delta)))
    old_nr_tasks: = old_nr_tasks + delta
    if new_nr_tasks < 0 {
      panic(std::errors::new("negative number of task in WaitGroup"))
    }

    if new_nr_tasks != 0 {
      ret
    }

    n_waiters: = std::sync::atomic::load_u32(&.wait_n)
    if n_waiters == 0 {
      ret
    }

    for {
      _ = std::sync::atomic::compare_swap_u32(&.wait_n, n_waiters, 0)
      if n_waiters == 0 {
        ret
      }
      n_waiters = std::sync::atomic::load_u32(&.wait_n)
    }
  }

  //doc:
  // decrement the WaitGroup counter by one
  @inline
  pub &done() { .add(-1) }

  //doc:
  // blocks until all tasks are done
  pub &wait() {
    nr_tasks: = int(std::sync::atomic::load_u32(&.task_n))
    if nr_tasks == 0 {
      ret
    }
    _ = std::sync::atomic::add_u32(&.wait_n, 1)
    for std::sync::atomic::load_u32(&.wait_n) != 0 {}
  }
}
