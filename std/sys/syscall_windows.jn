// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::unicode::utf16::{append_rune, decode}

use cpp "<dirent.h>"

cpp type wchar_t: u16

cpp struct _WDIR{}

cpp struct _wdirent {
  pub d_name: *cpp.wchar_t
}

cpp fn GetStdHandle(stdh: uintptr): *unsafe
cpp unsafe fn CloseHandle(stdh: *unsafe): bool
cpp unsafe fn wstat(path: *cpp.wchar_t, mut handle: *cpp.stat): int
cpp unsafe fn _wopendir(path: *cpp.wchar_t): *cpp._WDIR
cpp unsafe fn _wclosedir(mut dir: *cpp._WDIR): int
cpp unsafe fn _wreaddir(mut dir: *cpp._WDIR): *cpp._wdirent
cpp unsafe fn _wopen(path: *cpp.wchar_t, flag: int, mode: int): int
cpp fn GetLastError(): u32
cpp unsafe fn GetCurrentDirectoryW(bufflen: u32, buff: *cpp.wchar_t): u32
cpp unsafe fn SetCurrentDirectoryW(path: *cpp.wchar_t): bool
cpp unsafe fn GetFullPathNameW(path: *cpp.wchar_t, bufflen: u32, buff: *cpp.wchar_t, fname: **cpp.wchar_t): u32

// _WDIR
pub type Wdir: cpp._WDIR
// _wdirent
pub type Wdirent: cpp._wdirent

pub type handle: uintptr

pub const INVALID_HANDLE = ^handle(0)

pub let STDIN  = get_std_handle(uintptr(STD_INPUT_HANDLE))
pub let STDOUT = get_std_handle(uintptr(STD_OUTPUT_HANDLE))
pub let STDERR = get_std_handle(uintptr(STD_ERROR_HANDLE))

// return utf16 encoding of utf8 string
pub fn utf16_from_str(s: str): []u16 {
  const NULL_TERMINATION = '\x00'
  let mut buf: []u16 = nil
  let runes = ([]rune)(s)
  for _, r in runes {
    if r == NULL_TERMINATION {
      break
    }
    buf = append_rune(buf, r)
  }
  ret append_rune(buf, NULL_TERMINATION)
}

// return utf8 encoding utf16 sequence s
pub fn utf16_to_str(s: []u16): str {
  if s == nil {
    ret ""
  }
  let mut code_page = unsafe { *(&s) }
  for i, v in s {
    if v == 0 {
      code_page = code_page[0:i]
      break
    }
  }
  ret (str)(decode(code_page))
}

// return utf8 encoding of utf16 sequence s in *u16 form
pub unsafe fn u16_ptr_to_str(s: *u16): str {
  if s == nil {
    ret ""
  }
  let mut code_page: []u16 = nil
  let mut i = 0
  for ; i++ {
    let r = (u16)(s[i])
    code_page = append[u16](code_page, r)
    if r == 0 {
      ret (str)(decode(code_page))
    }
  }
  ret ""
}

pub fn get_std_handle(stdh: uintptr): handle {
  ret handle(cpp.GetStdHandle(stdh))
}

pub unsafe fn close_handle(stdh: handle): bool {
  ret cpp.CloseHandle(unsafe {
    (*unsafe)(stdh)
    })
}

// wstat function
pub unsafe fn wstat(path: *u16, mut stat: *Stat): int {
  ret cpp.wstat((*cpp.wchar_t)(path), stat)
}

// _wopen function
pub unsafe fn _wopen(path: *u16, flag: int, mode: int): int {
  ret cpp._wopen((*cpp.wchar_t)(&path[0]), flag, mode)
}

// return last windows error
pub fn get_last_error(): u32 {
  ret cpp.GetLastError()
}

// read working directory into buff and return readed
pub unsafe fn get_current_directory(path: *u16): bool {
  ret cpp.SetCurrentDirectoryW((*cpp.wchar_t)(path))
}

// set working directory to path
pub unsafe fn set_current_directory(path: *u16): bool {
  ret cpp.SetCurrentDirectoryW((*cpp.wchar_t)(path))
}

// _wopendir function
pub unsafe fn _wopendir(path: *u16): *Wdir {
  ret cpp._wopendir((*cpp.wchar_t)(path))
}

// _wreaddir function
pub unsafe fn _wreaddir(mut dir: *Wdir): *Wdirent {
  ret cpp._wreaddir(dir)
}

// _wclosedir function
pub unsafe _wclosedir(mut dir: *Wdir) : int {
  ret cpp._wclosedir(dir)
}

// call windows GetFullPathNameW function
pub unsafe fn get_full_path_name(path: *u16, bufflen: u32, buff: *u16, fname: **u16): u32 {
  ret cpp.GetFullPathNameW((*cpp.wchar_t)(path), bufflen, (*cpp.wchar_t)(buff), (**cpp.wchar_t)(fname))
}
