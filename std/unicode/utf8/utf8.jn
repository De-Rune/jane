// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// the circumtances, the test ensure that RUNE_ERROR == std::unicode::REPLACEMENT_CHAR
// AND MAX_RUNE == std::unicode::MAX_RUNE are valid
// defining the locally removes the depedency on package std::unicode

//doc:
// "error" rune or "unicode replacement char"
pub const RUNE_ERROR: = '\uFFFD'

//doc:
// character below RUNE_SELF are represented as themselves in a single bytes
pub const RUNE_SELF = 0x80

//doc:
// max valid unicode code point
pub const MAX_RUNE: = '\U0010FFFF'

//doc:
// max number of bytes of a UTF-8 encode unicode character
pub const UTF_MAX: = 4

// code point in the surrogate range are not valid for UTF-8
const SURROGATE_MIN: = 0xD800
const SURROGATE_MAX: = 0xDFFF

//doc:
// report whether r can legally encode as UTF-8 code point that
// are out of range or a surrogate half are illegal
pub valid_rune(r rune) bool {
  match {
    case 0 <= r && r < SURROGATE_MIN:
      ret true
    case SURROGATE_MAX < r && r <= MAX_RUNE:
      ret true
  }
  ret false
}
