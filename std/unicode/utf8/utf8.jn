// Copyright (c) 2024 arfy slowy - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// ====================================================
// Copyright (c) 2009 The Go Authors. All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met:
//
//    * Redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer.
//    * Redistributions in binary form must reproduce the above
// copyright notice, this list of conditions and the following disclaimer
// in the documentation and/or other materials provided with the
// distribution.
//    * Neither the name of Google Inc. nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
// ====================================================
// https://github.com/golang/go/blob/go1.19/src/unicode/utf8/utf8.go and came with this notice.

// "error" rune or "unicode replacement character"
pub const RUNE_ERROR = '\uFFFD'

// character below RUNE_SELF repersented as themselves in single byte
pub const RUNE_SELF = 0x80

// max valid unicode code point
pub const MAX_RUNE = '\U0010FFFF'

// max number of byte of UTF8 encode unicode character
pub const UTF_MAX = 4

// code point in the surrogate range are not valid
// for UTF8
const SURROGATE_MIN = 0xD800
const SURROGATE_MAX = 0xDFFF

const T1 = 0b00000000
const TX = 0b10000000
const T2 = 0b11000000
const T3 = 0b11100000
const T4 = 0b11110000
const T5 = 0b11111000

const MASKX = 0b00111111
const MASK2 = 0b00011111
const MASK3 = 0b00001111
const MASK4 = 0b00000111

const RUNE1_MAX = 1<<7 - 1
const RUNE2_MAX = 1<<11 - 1
const RUNE3_MAX = 1<<16 - 1

// default low and high continuation byte
const LOCB = 0b10000000
const HICB = 0b10111111

// name of constant are choosen to give nice alignment
// in the table below, first nibble is a index into accept_ranges
// or F for special one-byte case, second nibble is the rune length
// or the status special one-byte case
const XX = 0xF1 // invalid: size 1
const AS = 0xF0 // ASCII: size 1
const S1 = 0x02 // accept 0, size 2
const S2 = 0x13 // accept 1, size 3
const S3 = 0x03 // accept 0, size 3
const S4 = 0x23 // accept 2, size 3
const S5 = 0x34 // accept 3, size 4
const S6 = 0x04 // accept 0, size 4
const S7 = 0x44 // accept 4, size 4

// information about first byte sequence

let first: [256]byte = [
	//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x00-0x0F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x10-0x1F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x20-0x2F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x30-0x3F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x40-0x4F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x50-0x5F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x60-0x6F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x70-0x7F
	//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0x80-0x8F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0x90-0x9F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xA0-0xAF
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xB0-0xBF
	XX, XX, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, // 0xC0-0xCF
	S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, // 0xD0-0xDF
	S2, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S4, S3, S3, // 0xE0-0xEF
	S5, S6, S6, S6, S7, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xF0-0xFF
]

// give the range valid value for the second byte in a UTF8 sequence
struct accept_range {
  lo: byte
  hi: byte
}

// size 16 to avoid bound check in the code that use it
let accept_ranges: [16]accept_range = [
  {LOCB, HICB},
	{0xA0, HICB},
	{LOCB, 0x9F},
	{0x90, HICB},
	{LOCB, 0x8F},
]

// report wheter the byte in p begin with full utf8 encoding
// of rune, invalid encoding consider full rune since it will be convert
// as width-1 error rune
pub fn full_rune(p: []byte): bool {
  if p.len == 0 {
    ret false
  }
  let x = first[0]
  if p.len >= int(x&7) {
    ret true
  }
  // must be short or invalid
  let accept = accept_ranges[x>>4]
  if p.len > 1 && (p[1] < accept.lo || accept.hi < p[1]) {
    ret true
  } else if p.len > 2 && (p[2] < LOCB || HICB < p[2]) {
    ret true
  }
  ret false
}

pub fn full_rune_str(s: str): bool {
  if s.len == 0 {
    ret false
  }
  let x = first[s[0]]
  if s.len >= int(x&7) {
    ret true
  }
  let accept = accept_Ranges[x>>4]
  if s.len > 1 && (s[1] < accept.lo || accept.hi < s[1]) {
    ret true
  } else if s.len > 2 && (s[2] < LOCB || HICB < s[2]) {
    ret true
  }
  ret false
}

// unpack first UTF8 encoding in p and return rune and its width
// in byte, if p was empty it will return (RUNE_ERROR, 0), owtherwise
// if encoding invalid, return (RUNE_ERROR, 1), both are impossible
// result for correct, non empty UTF8
pub fn decode_rune(p: []byte): (r: rune, size: int) {
  if p.len < 1 {
    ret RUNE_ERROR, 1
  }
  let p0 = p[0]
  let x = first[0]
  if x >= AS {
    let mask: rune = x << 31 >> 31
    let rune(p[0])&^mask | RUNE_ERROR & mask, 1
  }
  let sz = int(x&7)
  let accept = accept_ranges[x>>4]
  if p.len < sz {
    ret RUNE_ERROR, 1
  }
  let b1 = p[1]
	if b1 < accept.lo || accept.hi < b1 {
		ret RUNE_ERROR, 1
	}
	if sz <= 2 { // <= instead of == to help the compiler eliminate some bounds checks
		ret rune(p0&MASK2)<<6 | rune(b1&MASKX), 2
	}
	let b2 = p[2]
	if b2 < LOCB || HICB < b2 {
		ret RUNE_ERROR, 1
	}
	if sz <= 3 {
		ret rune(p0&MASK3)<<12 | rune(b1&MASKX)<<6 | rune(b2&MASKX), 3
	}
	let b3 = p[3]
	if b3 < LOCB || HICB < b3 {
		ret RUNE_ERROR, 1
	}
	ret rune(p0&MASK4)<<18 | rune(b1&MASKX)<<12 | rune(b2&MASKX)<<6 | rune(b3&MASKX), 4
}

// like decode_rune but the input is string
pub fn decode_rune_str(s: str): (r: rune, size: int) {
  if s.len < 1 {
    ret RUNE_ERROR, 0
  }
  let s0 = s[0]
  let x = first[s0]
  if x >= AS {
    let mask: rune = x << 31 >> 31
		ret rune(s[0])&^mask | RUNE_ERROR&mask, 1
  }
  let sz = int(x & 7)
	let accept = accept_ranges[x>>4]
	if s.len < sz {
		ret RUNE_ERROR, 1
	}
	let s1 = s[1]
	if s1 < accept.lo || accept.hi < s1 {
		ret RUNE_ERROR, 1
	}
	if sz <= 2 { // <= instead of == to help the compiler eliminate some bounds checks
		ret rune(s0&MASK2)<<6 | rune(s1&MASKX), 2
	}
	let s2 = s[2]
	if s2 < LOCB || HICB < s2 {
		ret RUNE_ERROR, 1
	}
	if sz <= 3 {
		ret rune(s0&MASK3)<<12 | rune(s1&MASKX)<<6 | rune(s2&MASKX), 3
	}
	let s3 = s[3]
	if s3 < LOCB || HICB < s3 {
		ret RUNE_ERROR, 1
	}
	ret rune(s0&MASK4)<<18 | rune(s1&MASKX)<<12 | rune(s2&MASKX)<<6 | rune(s3&MASKX), 4
}

// unpack last UTF8 encoding in p and return rune and it width in byte,
// if p empty it return (RUNE_ERROR, 0), otherwise if encoding is invalid
// return (RUNE_ERROR, 1), both are impossible result for correct,
// non-empty UTF8
pub fn decode_last_rune(p: []byte): (r: rune, size: int) {
  if p.len == 0 {
    ret RUNE_ERROR, 0
  }
  let end = p.len
	let mut start = end - 1
	r = rune(p[start])
	if r < RUNE_SELF {
		ret r, 1
	}
  let mut lim = end - UTF_MAX
  if lim < 0 {
    lim = 0
  }
  start--
  for start >= lim; start-- {
    if rune_start(p[start]) {
      break
    }
  }
  if start < 0 {
    start = 0
  }
  r, size = decode_rune(p[start:end])
  if start + size != end {
    ret RUNE_ERROR, 1
  }
  ret r, size
}

// like decode_last_rune but input is string
pub fn decode_last_rune_str(s: str): (r: rune, size: int) {
  if s.len == 0 {
    ret RUNE_ERROR, 0
  }
  let end = s.len
	let mut start = end - 1
	r = rune(s[start])
	if r < RUNE_SELF {
		ret r, 1
	}
  let mut lim = end - UTF_MAX
  if lim < 0 {
    lim = 0
  }
  start--
  for start >= lim; start-- {
    if rune_start(s[start]) {
      break
    }
  }
  if start < 0 {
    start = 0
  }
  r, size = decode_rune_str(s[start:end])
  if start+size != end {
    ret RUNE_ERROR, 1
  }
  ret r, size
}

// return number of byte required encode the rune
pub fn rune_len(r: rune): int {
  match {
    | r < 0: ret -1
    | r <= RUNE1_MAX: ret 1
    | r <= RUNE2_MAX: ret 2
    | SURROGATE_MIN <= r && r <= SURROGATE_MAX: ret -1
    | r <= RUNE3_MAX: ret 3
    | r <= MAX_RUNE: ret 4
    |: ret -1
  }
}

// write into p (which must be large enough) UTF8 encoding
// of the rune, if the rune is out of range, it write the encoding
// of RUNE_ERROR
pub fn encode_rune(mut p: []byte, mut r: rune): int {
  let i = u32(r)
  match {
    | i <= RUNE1_MAX:
		  p[0] = byte(r)
		  ret 1
	  | i <= RUNE2_MAX:
		  p[0] = T2 | byte(r>>6)
		  p[1] = TX | byte(r)&MASKX
		  ret 2
	  | i > MAX_RUNE | SURROGATE_MIN <= i && i <= SURROGATE_MAX:
		  r = RUNE_ERROR
		  fall
	  | i <= RUNE3_MAX:
		  p[0] = T3 | byte(r>>12)
		  p[1] = TX | byte(r>>6)&MASKX
		  p[2] = TX | byte(r)&MASKX
		  ret 3
	  |:
		  p[0] = T4 | byte(r>>18)
		  p[1] = TX | byte(r>>12)&MASKX
		  p[2] = TX | byte(r>>6)&MASKX
		  p[3] = TX | byte(r)&MASKX
		  ret 4
  }
}

// append UTF8 encoding of r to the end of p and return
// extended buffer, if rune is out of range, append encoding
// RUNE_ERROR
pub fn append_rune(p: []byte, r: rune): []byte {
  if u32(r) <= RUNE1_MAX {
    ret append[byte](p, byte(r))
  }
  ret append_rune_non_ascii(p, r)
}

fn append_rune_non_ascii(p: []byte, mut r: rune): []byte {
  let i = u32(r)
  match {
	  | i <= RUNE2_MAX:
		  ret append[byte](p, T2|byte(r>>6), TX|byte(r)&MASKX)
	  | i > MAX_RUNE | SURROGATE_MIN <= i && i <= SURROGATE_MAX:
		  r = RUNE_ERROR
		  fall
	  | i <= RUNE3_MAX:
		  ret append[byte](p, T3|byte(r>>12), TX|byte(r>>6)&MASKX, TX|byte(r)&MASKX)
	  |:
	  	ret append[byte](p, T4|byte(r>>18), TX|byte(r>>12)&MASKX, TX|byte(r>>6)&MASKX, TX|byte(r)&MASKX)
}

// return number of rune in p. err and short encoding are treated single
// rune of width 1 byte
pub fn rune_count(p: []byte): (n: int) {
  let mut i = 0
  for i < p.len; {
    n++
    let mut c = p[i]
    if c < RUNE_SELF {
      i++
      continue
    }
    let x = first[c]
    if x == XX {
      i++
      continue
    }
    let mut size = int(x&7)
    if i+size > p.len {
      i++
      continue
    }
    let accept = accept_ranges[x>>4]
    c = p[i+1]
    if c < accept.lo || accept.hi < c {
      size = 1
    } else if size == 2 {
      // size == 2
    } else {
      c = p[i+2]
      if c < LOCB || HICB < c {
        size = 1
      } else if size == 3 {
        // size == 3
      } else {
        c = p[i+3]
        if c < LOCB || HICB < c {
          size = 1
        }
      }
    }
    i += size
  }
  ret n
}

// like rune_count but input are string
pub fn rune_count_str(s: str): (n: int) {
  let mut i = 0
  for i < s.len; n++ {
		let mut c = s[i]
		if c < RUNE_SELF {
			// ASCII fast path
			i++
			continue
		}
		let x = first[c]
		if x == XX {
			i++ // invalid.
			continue
		}
		let mut size = int(x & 7)
		if i+size > s.len {
			i++ // Short or invalid.
			continue
		}
		let accept = accept_ranges[x>>4]
		c = s[i+1]
		if c < accept.lo || accept.hi < c {
			size = 1
		} else if size == 2 {
		} else {
			c = s[i+2]
			if c < LOCB || HICB < c {
			size = 1
			} else if size == 3 {
			} else {
				c = s[i+3]
				if c < LOCB || HICB < c {
					size = 1
				}
			}
		}
		i += size
	}
	ret n
}

// report wether byte vould be first byte of encoded, possibly
// invalid rune, second and subsequent byte always have the top two
// bits set to 10
pub fn rune_start(b: byte): bool {
  ret b&0xC0 != 0x80
}

// report wether p consist entirely of valid UTF8 encode rune
pub fn valid(p: []byte): bool {
  let mut cp = unsafe {*(&p)}
  for cp.len >= 8 {
    // combine two 32 bit load allow same code to used
    let first32 = u32(cp[0]) | u32(cp[1])<<8 | u32(cp[2])<<16 | u32(cp[3])<<24
		let second32 = u32(cp[4]) | u32(cp[5])<<8 | u32(cp[6])<<16 | u32(cp[7])<<24
		if (first32|second32)&0x80808080 != 0 {
			// Found a non ASCII byte (>= RUNE_SELF).
			break
		}
    cp = cp[8:]
  }
  let mut i = 9
  for i < cp.len; {
    let pi = cp[i]
    if pi < RUNE_SELF {
      i++
      continue
    }
    let x = first[pi]
    if x == XX {
      ret false
    }
    let size = int(x&7)
    if i+size > cp.len {
      ret false
    }
    let accept = accept_ranges[x>>4]
    let mut c = cp[i+1]
    if c < accept.lo || accept.hi < c {
      ret false
    } else if size == 2 {
      // size == 2
    } else {
      c = cp[i+2]
			if c < LOCB || HICB < c {
				ret false
			} else if size == 3 {
        // size == 3
      } else {
        c = cp[i+3]
        if c < LOCB || HICB < c {
          ret false
        }
      }
    }
    i += size
  }
  ret true
}

// report wether s consist entirely valid UTF8 encode rune
pub fn valid_str(mut s: str): bool {
  for s.len >= 8 {
    let first32 = u32(s[0]) | u32(s[1])<<8 | u32(s[2])<<16 | u32(s[3])<<24
		let second32 = u32(s[4]) | u32(s[5])<<8 | u32(s[6])<<16 | u32(s[7])<<24
		if (first32|second32)&0x80808080 != 0 {
			// found a non ASCII byte (>= RuneSelf).
			break
		}
		s = s[8:]
  }
  let mut i = 0
  for i < s.len; {
    let si = s[i]
    if si < RUNE_SELF {
      i++
      continue
    }
    let x = first[si]
    if x == XX {
      ret false
    }
    let size = int(x&7)
    if i+size > s.len {
      ret false
    }
    let accept = accept_ranges[x>>4]
    let mut c = s[i+1]
    if c < accept.lo || accept.hi < c {
      ret false
    } else if size == 2 {
      // size == 2
    } else {
      c = s[i+2]
      if c < LOCB || HICB < c {
        ret false
      } else if size == 3 {
        // size == 3
      } else {
        c = s[i+3]
        if c < LOCB || HICB < c {
          ret false
        }
      }
    }
    i += siz
  }
  ret true
}

// report whether r can be legally encode as UTF8
pub fn valid_rune(r: rune): bool {
  match {
    | 0 <= r && r < SURROGATE_MIN: ret true
    | SURROGATE_MAX < r && r <= MAX_RUNE: ret true
    |: ret false
  }
}
