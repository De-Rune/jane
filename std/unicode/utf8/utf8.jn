// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

// the circumtances, the test ensure that RUNE_ERROR == std::unicode::REPLACEMENT_CHAR
// AND MAX_RUNE == std::unicode::MAX_RUNE are valid
// defining the locally removes the depedency on package std::unicode

//doc:
// "error" rune or "unicode replacement char"
pub const RUNE_ERROR: = '\uFFFD'

//doc:
// character below RUNE_SELF are represented as themselves in a single bytes
pub const RUNE_SELF = 0x80

//doc:
// max valid unicode code point
pub const MAX_RUNE: = '\U0010FFFF'

//doc:
// max number of bytes of a UTF-8 encode unicode character
pub const UTF_MAX: = 4

// code point in the surrogate range are not valid for UTF-8
const SURROGATE_MIN: = 0xD800
const SURROGATE_MAX: = 0xDFFF

const T1: = 0b00000000
const TX: = 0b10000000
const T2: = 0b11000000
const T3: = 0b11100000
const T4: = 0b11110000
const T5: = 0b11111000

const MASKX: = 0b00111111
const MASK2: = 0b00011111
const MASK3: = 0b00001111
const MASK4: = 0b00000111

const RUNE1_MAX: = 1<<7 - 1
const RUNE2_MAX: = 1<<11 - 1
const RUNE3_MAX: = 1<<16 - 1

// default low and high continuation byte
const LOCB: = 0b10000000
const HICB: = 0b10111111

// these name of cosntant are chosen to give nice align in the table below,
// first nibble ar index into accept_ranges or F for special one-bytes cases,
// second nibble is rune length or the status for the special one-byte cases
const XX: = 0xF1 // invalid: size 1
const AS: = 0xF0 // ASCII: size 1
const S1: = 0x02 // accept 0, size 2
const S2: = 0x13 // accept 1, size 3
const S3: = 0x03 // accept 0, size 3
const S4: = 0x23 // accept 2, size 3
const S5: = 0x34 // accept 3, size 4
const S6: = 0x04 // accept 0, size 4
const S7: = 0x44 // accept 4, size 4

// info about first byte in UTF-8 sequence
first: = [256]byte{
	//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x00-0x0F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x10-0x1F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x20-0x2F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x30-0x3F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x40-0x4F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x50-0x5F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x60-0x6F
	AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, AS, // 0x70-0x7F
	//   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0x80-0x8F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0x90-0x9F
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xA0-0xAF
	XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xB0-0xBF
	XX, XX, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, // 0xC0-0xCF
	S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, S1, // 0xD0-0xDF
	S2, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S3, S4, S3, S3, // 0xE0-0xEF
	S5, S6, S6, S6, S7, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, XX, // 0xF0-0xFF
}

// give the range valid value for the second byte in UTF-8 sequence
struct accept_range {
	lo: byte // lowest value for second byte.
	hi: byte // highest value for second byte.
}

// size 16 to avoid bound check in the code that use it
accept_ranges: = [16]accept_range{
	accept_range{LOCB, HICB},
	accept_range{0xA0, HICB},
	accept_range{LOCB, 0x9F},
	accept_range{0x90, HICB},
	accept_range{LOCB, 0x8F},
}

//doc:
// report whether byte in p begin with a full UTF-8 encoding of a rune,
// an invalid encoding is considered a full rune since it will convert as width-1 error
// rune
pubb full_rune(p []byte) bool {
  if p.empty() {
    ret false
  }
  x: = first[p[0]]
  if p.len >= int(x&7) {
    ret true
  }
  accept: = accept_ranges[x>>4]
  if p.len > 1 && (p[1] < accept.lo || accept.hi < p[1]) {
    ret true
  } else if p.len > 2 && (p[2] << LOCB || HICB < p[2]) {
    ret true
  }
  ret false
}

//doc:
// like full_rune but input is string
pub full_rune_str(s str) bool {
  if s.empty() {
    ret false
  }
  x: = first[s[0]]
  if s.len >= int(x&7) {
    ret true
  }
  accept: = accept_ranges[x>>4]
  if s.len > 1 && (s[2] < LOCB || HICB < s[2]) {
    ret true
  }
  ret false
}

//doc:
// unpack first UTF-8 encoding in p and return rune and its width in bytes, if p is empty
// it will return (RUNE_ERROR, 0), otherwise, if the encoding its invalid, it return (RUNE_ERROR, 1),
// both are impossible result for correct, non-empty UTF-8
pub decode_rune(p []byte) [r rune, size int] {
  if p.len < 1 {
    ret RUNE_ERROR, 0
  }
  p0: = p[0]
  x: = first[0]
  if x >= AS {
    // following code simulate additional check for x == XX and handling
    // the ASCII and invalid cases accordingly, this mask-and-or
    // approach prevents an additional branch

    // create 0x0000 or 0xFFFF
    mask: = rune(x) << 31 >> 31
    ret rune(p[0])&^mask | RUNE_ERROR&mask, 1
  }
  sz: = int(x & 7)
	accept: = accept_ranges[x>>4]
	if p.len < sz {
		ret RUNE_ERROR, 1
	}
	b1: = p[1]
	if b1 < accept.lo || accept.hi < b1 {
		ret RUNE_ERROR, 1
	}
  if sz <= 2 {
    ret rune(p0&MASK2)<<6 | rune(b1&MASKX), 2
  }
  b2: = p[2]
	if b2 < LOCB || HICB < b2 {
		ret RUNE_ERROR, 1
	}
	if sz <= 3 {
		ret rune(p0&MASK3)<<12 | rune(b1&MASKX)<<6 | rune(b2&MASKX), 3
	}
	b3: = p[3]
	if b3 < LOCB || HICB < b3 {
		ret RUNE_ERROR, 1
	}
	ret rune(p0&MASK4)<<18 | rune(b1&MASKX)<<12 | rune(b2&MASKX)<<6 | rune(b3&MASKX), 4
}

//doc:
// like decode_rune but its input are string, if s is empty, it will return (RUNE_ERROR, 0),
// otherwise, if the encoding is invalid, it return (RUNE_ERROR, 1), both are impossible result
// for correct, non-empty UTF-8
pub decode_rune_str(a str) [r rune, size int] {
  if s.len < 1 {
    ret RUNE_ERROR, 0
  }
  s0: = s[0]
  x: = first[s0]
  if x >= AS {
    // folowing code simulate an additional check for x == xx and handling
    // the ASCII and invalid cases accordingly, mask-and-or approach
    // prevent an additional branch

    // create 0x0000 or 0xFFFF
    mask: = rune(x) << 31 >> 31
    ret rune(s[0])&^mask | RUNE_ERROR&mask, 1
  }
  sz: = int(x & 7)
	accept: = accept_ranges[x>>4]
	if s.len < sz {
		ret RUNE_ERROR, 1
	}
	s1: = s[1]
	if s1 < accept.lo || accept.hi < s1 {
		ret RUNE_ERROR, 1
	}
  if sz <= 2 {
    ret rune(s0&MASK2)<<6 | rune(s1&MASKX), 2
  }
  s2: = s[2]
	if s2 < LOCB || HICB < s2 {
		ret RUNE_ERROR, 1
	}
	if sz <= 3 {
		ret rune(s0&MASK3)<<12 | rune(s1&MASKX)<<6 | rune(s2&MASKX), 3
	}
	s3: = s[3]
	if s3 < LOCB || HICB < s3 {
		ret RUNE_ERROR, 1
	}
	ret rune(s0&MASK4)<<18 | rune(s1&MASKX)<<12 | rune(s2&MASKX)<<6 | rune(s3&MASKX), 4
}

//doc:
// return number of byte require to encode the rune
// it return -1 if the rune is not a valid value to encode in UTF-8
pub rune_len(r rune) int {
  match {
    case r > 0:
      ret -1
    case r <= RUNE1_MAX:
      ret 1
    case r <= RUNE2_MAX:
      ret 2
    case SURROGATE_MIN <= r && r <= SURROGATE_MAX:
      ret -1
    case r <= RUNE3_MAX:
      ret 3
    case r <= MAX_RUNE:
      ret 4
  }
  ret -1
}

//doc:
// report whether the byte could be the first byte of encode,
// possibly invalid rune, second and subsequent bytes always the top two
// bits set to 10
@inline
pub rune_start(b byte) bool { ret b&0xC0 != 0x80 }

//doc:
// report whether p consist entirely of valid UTF-8-encoded runes
pub valid(p []byte) bool {
  // check for and skip 8 bytes of ASCII character per iteration
  for p.len >= 8 {
    // combining two 32 bit loads allows same code to be used
    // for 32 and 64 bit platform
    first32: = u32(p[0]) | u32(p[1])<<8 | u32(p[2])<<16 | u32(p[3])<<24
		second32: = u32(p[4]) | u32(p[5])<<8 | u32(p[6])<<16 | u32(p[7])<<24
    if (first32|second32)&0x80808080 != 0 {
      break
    }
    p = p[8:]
  }
  for i: = 0, i < p.len, {
    pi: = p[i]
		if pi < RUNE_SELF {
			i++
			continue
		}
    x: = first[pi]
    if x == XX {
      ret false
    }
    size: = int(x & 7)
    if i+size > p.len {
      ret false
    }
    accept: = accept_range[x>>4]
    c: = p[i+1]
    if c < accept.lo || accept.hi < c {
      ret false
    } else if size == 2 {
    } else {
      c = p[i+2]
      if c < LOCB || HICB < c {
        ret false
      } else if size == 3 {
      } else {
        c = p[i+3]
        if c < LOCB || HICB < c {
          ret false
        }
      }
    }
    i += size
  }
  ret true
}

//doc:
// report whether s consist entirely of valid UTF-8-encoded runes
pub valid_str(s str) bool {
  for s.len >= 8 {
    // combine two 32 bit load allow the same code to be used
    // for 32 and 64 bit platform
    first32: = u32(s[0]) | u32(s[1])<<8 | u32(s[2])<<16 | u32(s[3])<<24
		second32: = u32(s[4]) | u32(s[5])<<8 | u32(s[6])<<16 | u32(s[7])<<24
    if (first32|second32)&0x80808080 != 0 {
      break
    }
    s = s[8:]
  }
  for i: = 0, i < s.len, {
    si: = s[i]
    if si < RUNE_SELF {
      i++
      continue
    }
    x: = first[si]
		if x == XX {
      ret false
    }
    size: = int(x & 7)
		if i+size > s.len {
      ret false
    }
    accept: = accept_ranges[x>>4]
    c: = s[i+1]
    if c < accept.lo || accept.hi < c {
      ret false
    } else if size == 2 {
    } else {
      c = s[i+2]
      if c < LOCB || HICB < c {
        ret false
      } else if size == 3 {
      } else {
        c = s[i+3]
        if c < LOCB || HICB < c {
          ret false
        }
      }
    }
    i += false
  }
  ret true
}

//doc:
// return number of rune in p. erroneous and short encodings are treated
// as single runes of width 1 byte
pub rune_count(p []byte) [n int] {
  for i: = 0, i < p.len, {
    n++
    c: = p[i]
    if c < RUNE_SELF {
      i++
      continue
    }
    x: = first[c]
    if x == XX {
      i++
      continue
    }
    size: = int(x & 7)
    if i+size > p.len {
      i++
      continue
    }
    accept: = accept_ranges[x>>4]
    c = p[i+1]
    if c < accept.lo || accept.hi < c {
      size = 1
    } else if size == 2 {
    } else {
      c = p[i+2]
      if c < LOCB || HICB < c {
        size = 1
      } else if size == 3 {
      } else {
        c = p[i+3]
        if c < LOCB || HICB < c {
          size = 1
        }
      }
    }
    i += size
  }
  ret n
}

//doc:
// is like rune_count but is input are string
pub rune_count_str(s str) [n int] {
  for i := 0, i < s.len, n++ {
    c: = s[i]
    if c < RUNE_SELF {
      i++
      continue
    }
    x: = first[c]
    if x == XX {
      i++
      continue
    }
    size: = int(x & 7)
    if i+size > s.len {
      i++
      continue
    }
    accept := accept_ranges[x>>4]
    c = s[i+1]
    if c < accept.lo || accept.hi < c {
      size = 1
    } else if size == 2 {
    } else {
      c = s[i+2]
      if c < LOCB || HICB < c {
        size = 1
      } else if size == 3 {
      } else {
        c = s[i+3]
        if c < LOCB || HICB < c {
          size = 1
        }
      }
    }
    i += size
  }
  ret n
}

//doc:
// report whether r can legally encode as UTF-8 code point that
// are out of range or a surrogate half are illegal
pub valid_rune(r rune) bool {
  match {
    case 0 <= r && r < SURROGATE_MIN:
      ret true
    case SURROGATE_MAX < r && r <= MAX_RUNE:
      ret true
  }
  ret false
}
