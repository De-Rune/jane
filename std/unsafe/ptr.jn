// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use std::mem

use cpp "unsafe.hpp"

type [T]
cpp __jnc_uintptr_cast_to_raw(addr uintptr) *T

//doc:
// wrapper structure for unsafe raw pointer
type[T]
pub struct Ptr {
  ptr: uintptr
}

impl Ptr {
  //doc: return unsafe pointer as unsafe voidptr
  @inline
  pub &to_voidptr() Voidptr {
    ret voidptr_from(.ptr)
  }

  //doc:
  // move pointer from its pointing position by size of data type.
  // the offset amount is determined by n,
  // moving back require negative expression
  // and moving forward require positive expression
  @inline
  pub &move(n int) {
    .ptr += n * std::mem::sizeof(T)
  }

  //doc: rerturn data of pointer
  @inline
  pub &get() T {
    ret *cpp.__jnc_uintptr_cast_to_raw[T](.ptr)
  }
}

impl Pointer for Ptr {
  @inline
  &addr() uintptr {
    ret .ptr
  }
}

//doc:
// return unsafe poiter for given raw pointer
type[T]
pub ptr_of(ptr *T) Ptr[T] {
  ret ptr_from[T](uintptr(ptr))
}

//doc:
// return unsafe pointer from given address
@inline
type[T]
pub ptr_from(addr uintptr) Ptr[T] {
  ret Ptr[T] {
    ptr: addr,
  }
}
