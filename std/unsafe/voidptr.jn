// Copyright (c) 2024 - DeRuneLabs
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

use cpp `unsafe.cpp`

type[T]
cpp __jnc_uintptr_cast_to_raw(add uintptr) *T

//doc:
// wrapper structure for voidptr
pub struct Voidptr {
  ptr: uintptr
}

impl Voidptr {
  //doc: return casted raw pointer of given type
  @typearg
  type[T]
  pub &cast() *T {
    ret cpp.__jnc_uintptr_cast_to_raw[T](.ptr)
  }

  //doc: return unsafe pointer of given type
  @inline @typearg
  type[T]
  pub &to_ptr() Ptr[T] {
    ret ptr_from[T](.ptr)
  }
}

impl Pointer for Voidptr {
  @inline
  &addr() uintptr {
    ret .ptr
  }
}

//doc: return voidptr instance from given addresss
@inline
pub voidptr_from(addr uintptr) Voidptr {
  ret Voidptr {
    ptr: addr
  }
}
